/*
Copyright 2018-2020 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** 
* @description MeshCmd, command line tool for Intel AMT and MeshCentral.
* @author Ylian Saint-Hilaire
* @version v0.2.0
*/

// Debug Stuff
//console.displayFinalizerMessages = 1; // Display objects that have event listeners that are disposed.
//console.displayStreamPipeMessages = 1; // Display stream pipe and un-pipes
//var __gc = setInterval(function () { console.log('GC'); _debugGC() }, 2000); //


var fs = require('fs');
var os = require('os');
var net = require('net');
var http = require('http');
var dgram = require('dgram');
var httpHeaders = require('http-headers');
var tcpserver = null;
var broadcastSockets = {};
var multicastSockets = {};
var discoveryInterval = null;
var membershipIPv4 = '239.255.255.235';
var membershipIPv6 = 'FF02:0:0:0:0:0:0:FE';
var settings = null;
var meshCmdVersion = '***Mesh*Cmd*Version***'; // Dynamically replaced with MeshCentral version
var amtLms = null, amtMei = null, amtMeiState = null;
var wsstack = null, amtstack = null;
var oswsstack = null, osamtstack = null;
var amtMeiTmpState = null;
var SMBiosTables = null;
var globalDebugFlags = 0; // 1 = IDER Debug
var pendingAmtConfigActions = 0;
var RCSMessageProtocolVersion = 1; // RCS Message Protocol Version.  Needs to be less than or equal to RCS server Message Protocol Version

// MeshCommander for Firmware (GZIP'ed, Base64) v0.8.3
var Large_IntelAmtWebApp_etag = "4gvohFmqhvpSJMWA0ldy";
var Large_IntelAmtWebApp = "";
var Medium_IntelAmtWebApp_etag = "ZPDe4E9xhNtQf26WilaR";
var Medium_IntelAmtWebApp = "";
var Small_IntelAmtWebApp_etag = "0fJ6mi0/RaMac2IFOMC0";
var Small_IntelAmtWebApp = "";

// MeshCommander LMS (GZIP'ed, Base64) v0.8.3
var _IntelAmtWebApp_etag = "SEFGMvMdiDHXbyDDoao1";
var _IntelAmtWebApp = "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";

// MeshCommander Local (GZIP'ed, Base64) v0.8.3
var FullSite_IntelAmtLocalWebApp_etag = "DCaDy1JQryZQXfI0L/CZ";
var FullSite_IntelAmtLocalWebApp = "";

// Check the server certificate fingerprint
function onVerifyServer(clientName, certs) {
    if (certs == null) { certs = clientName; } // Temporary thing until we fix duktape
    try { for (var i in certs) { if (certs[i].fingerprint.replace(/:/g, '') == settings.serverhttpshash) { return; } } } catch (e) { }
    if (settings.serverhttpshash != null) {
        console.log('Error: Failed to verify server certificate.');
        console.log('Server TLS hash: ' + certs[i].fingerprint.replace(/:/g, ''));
        exit(255);
        throw 'Invalid server certificate';
    }
}

// Various utility functions
function debug(level, message) { if ((settings.debuglevel != null) && (settings.debuglevel >= level)) { console.log(message); } }
function exit(status) { if (status == null) { status = 0; } try { process.exit(status); } catch (e) { } }
function getInstance(x, y) { for (var i in x) { if (x[i]["InstanceID"] == y) return x[i]; } return null; }
function md5hex(str) { return require('MD5Stream').create().syncHash(str).toString('hex'); }
function guidToStr(g) { return g.substring(6, 8) + g.substring(4, 6) + g.substring(2, 4) + g.substring(0, 2) + "-" + g.substring(10, 12) + g.substring(8, 10) + "-" + g.substring(14, 16) + g.substring(12, 14) + "-" + g.substring(16, 20) + "-" + g.substring(20); }
function parceArguments(argv) { var r = {}; for (var i in argv) { i = parseInt(i); if (argv[i].startsWith('--') == true) { var key = argv[i].substring(2).toLowerCase(), val = true; if (((i + 1) < argv.length) && (argv[i + 1].startsWith('--') == false)) { val = argv[i + 1]; } r[key] = val; } } return r; }

// Convert an object to string with all functions
function objToString(x, p, ret) {
    if (ret == undefined) ret = '';
    if (p == undefined) p = 0;
    if (x == null) { return '[null]'; }
    if (p > 8) { return '[...]'; }
    if (x == undefined) { return '[undefined]'; }
    if (typeof x == 'string') { if (p == 0) return x; return '"' + (x.split('\0')[0]) + '"'; }
    if (typeof x == 'buffer') { return '[buffer]'; }
    if (typeof x != 'object') { return x; }
    var r = '{' + (ret ? '\r\n' : ' ');
    for (var i in x) {
        if (i != '_ObjectID') { r += (addPad(p + 2, ret) + i + ': ' + objToString(x[i], p + 2, ret) + (ret ? '\r\n' : ' ')); }
    }
    return r + addPad(p, ret) + '}';
}

// Return p number of spaces 
function addPad(p, ret) { var r = ''; for (var i = 0; i < p; i++) { r += ' '; } return r; }

// Parse the incoming arguments
function run(argv) {
    if (meshCmdVersion[0] == '*') { meshCmdVersion = ''; } else { meshCmdVersion = ' v' + meshCmdVersion; }
    var args = parceArguments(argv);
    //console.log(JSON.stringify(argv));
    //console.log('addedModules = ' + JSON.stringify(addedModules));
    var actionpath = 'meshaction.txt';
    if (args.actionfile != null) { actionpath = args.actionfile; }
    var actions = ['HELP', 'ROUTE', 'MICROLMS', 'AMTSCAN', 'AMTPOWER', 'AMTFEATURES', 'AMTNETWORK', 'AMTLOADWEBAPP', 'AMTLOADSMALLWEBAPP', 'AMTLOADLARGEWEBAPP', 'AMTCLEARWEBAPP', 'AMTSTORAGESTATE', 'AMTINFO', 'AMTINFODEBUG', 'AMTVERSIONS', 'AMTHASHES', 'AMTSAVESTATE', 'AMTSCRIPT', 'AMTUUID', 'AMTCCM', 'AMTACM', 'AMTDEACTIVATE', 'AMTACMDEACTIVATE', 'SMBIOS', 'RAWSMBIOS', 'MESHCOMMANDER', 'AMTAUDITLOG', 'AMTEVENTLOG', 'AMTPRESENCE', 'AMTWIFI', 'AMTWAKE'];

    // Load the action file
    var actionfile = null;
    try { actionfile = fs.readFileSync(actionpath); } catch (e) { }
    if ((actionpath != 'meshaction.txt') && (actionfile == null)) { console.log('Unable to load \"' + actionpath + '\". Create this file or specify the location using --actionfile [filename].'); exit(1); return; }
    if (actionfile != null) { try { settings = JSON.parse(actionfile); } catch (e) { console.log(actionpath, e); exit(1); return; } } else { if (argv.length >= 2) { settings = { action: argv[1] } } }
    if (settings == null) { settings = {}; }
    var settings2 = {}; for (var i in settings) { settings2[i.toLowerCase()] = settings[i]; } settings = settings2;

    // Set the arguments
    if ((typeof args.action) == 'string') { settings.action = args.action; }
    if ((typeof args.authcookie) == 'string') { settings.authcookie = args.authcookie; }
    if ((typeof args.localport) == 'string') { settings.localport = parseInt(args.localport); }
    if ((typeof args.remotenodeid) == 'string') { settings.remotenodeid = args.remotenodeid; }
    if ((typeof args.name) == 'string') { settings.name = args.name; }
    if ((typeof args.username) == 'string') { settings.username = args.username; }
    if ((typeof args.password) == 'string') { settings.password = args.password; }
    if ((typeof args.url) == 'string') { settings.url = args.url; }
    if ((typeof args.profile) == 'string') { settings.profile = args.profile; }
    if ((typeof args.type) == 'string') { settings.type = args.type; }
    if ((typeof args.user) == 'string') { settings.username = args.user; }
    if ((typeof args.pass) == 'string') { settings.password = args.pass; }
    if ((typeof args.host) == 'string') { settings.hostname = args.host; }
    if ((typeof args.hostname) == 'string') { settings.hostname = args.hostname; }
    if ((typeof args.serverid) == 'string') { settings.serverid = args.serverid; }
    if ((typeof args.serverhttpshash) == 'string') { settings.serverhttpshash = args.serverhttpshash; }
    if ((typeof args.serverurl) == 'string') { settings.serverurl = args.serverurl; }
    if ((typeof args.remoteport) == 'string') { settings.remoteport = parseInt(args.remoteport); }
    if ((typeof args.remotetarget) == 'string') { settings.remotetarget = args.remotetarget; }
    if ((typeof args.out) == 'string') { settings.output = args.out; }
    if ((typeof args.output) == 'string') { settings.output = args.output; }
    if ((typeof args.debug) == 'string') { settings.debuglevel = parseInt(args.debug); }
    if ((typeof args.debugflags) == 'string') { globalDebugFlags = parseInt(args.debugflags); }
    if ((typeof args.script) == 'string') { settings.script = args.script; }
    if ((typeof args.agent) == 'string') { settings.agent = args.agent; }
    if ((typeof args.proxy) == 'string') { settings.proxy = args.proxy; }
    if ((typeof args.floppy) == 'string') { settings.floppy = args.floppy; }
    if ((typeof args.cdrom) == 'string') { settings.cdrom = args.cdrom; }
    if ((typeof args.tag) == 'string') { settings.tag = args.tag; }
    if ((typeof args.scan) == 'string') { settings.scan = args.scan; }
    if ((typeof args.token) == 'string') { settings.token = args.token; }
    if ((typeof args.timeout) == 'string') { settings.timeout = parseInt(args.timeout); }
    if ((typeof args.uuidoutput) == 'string' || args.uuidoutput) { settings.uuidoutput = args.uuidoutput; }
    if (args.emailtoken) { settings.emailtoken = true; }
    if (args.debug === true) { settings.debuglevel = 1; }
    if (args.debug) { try { waitForDebugger(); } catch (e) { } }
    if (args.noconsole) { settings.noconsole = true; }
    if (args.nocommander) { settings.noconsole = true; }
    if (args.lmsdebug) { settings.lmsdebug = true; }
    if (args.json) { settings.json = true; }
    if (args.tls) { settings.tls = true; }
    if ((argv.length > 1) && (actions.indexOf(argv[1].toUpperCase()) >= 0)) { settings.action = argv[1]; }

    // Validate meshaction.txt
    if (settings.action == null) {
        console.log('MeshCentral Command (MeshCmd) ' + meshCmdVersion);
        console.log('No action specified, use MeshCmd like this:\r\n');
        console.log('  meshcmd [action] [arguments...]\r\n');
        console.log('Valid MeshCentral actions:');
        console.log('  Route             - Map a local TCP port to a remote computer.');
        console.log('\r\nValid local actions:');
        console.log('  SMBios            - Display System Management BIOS tables for this computer.');
        console.log('  RawSMBios         - Display RAW System Management BIOS tables for this computer.');
        console.log('  MicroLMS          - Run MicroLMS, allowing local access to Intel AMT.');
        console.log('  AmtInfo           - Show Intel AMT version and activation state.');
        console.log('  AmtVersions       - Show all Intel ME version information.');
        console.log('  AmtHashes         - Show all Intel AMT trusted activation hashes.');
        console.log('  AmtCCM            - Activate Intel AMT into Client Control Mode.');
        console.log('  AmtACM            - Activate Intel AMT into Admin Control Mode.');
        console.log('  AmtDeactivate     - Deactivate Intel AMT if activated in Client Control mode.');
        console.log('  AmtAcmDeactivate  - Deactivate Intel AMT if activated in Admin Control mode.');
        console.log('\r\nValid local or remote actions:');
        console.log('  MeshCommander     - Launch a local MeshCommander web server.');
        console.log('  AmtUUID           - Show Intel AMT unique identifier.');
        console.log('  AmtEventLog       - Show the Intel AMT event log.');
        console.log('  AmtAuditLog       - Show the Intel AMT audit log.');
        console.log('  AmtLoadWebApp     - Load MeshCommander in Intel AMT 11.6+ firmware.');
        console.log('  AmtClearWebApp    - Clear everything from Intel AMT web storage.');
        console.log('  AmtStorageState   - Show contents of the Intel AMT web storage.');
        console.log('  AmtSaveState      - Save all Intel AMT WSMAN object to file.');
        console.log('  AmtPresence       - Heartbeat a local Intel AMT watchdog agent.');
        console.log('  AmtPower          - Perform remote Intel AMT power operation.');
        console.log('  AmtScript         - Run .mescript on Intel AMT.');
        console.log('  AmtIDER           - Mount local disk image to remote computer.');
        console.log('  AmtFeatures       - Intel AMT features & user consent.');
        console.log('  AmtNetwork        - Intel AMT network interface settings.');
        console.log('  AmtScan           - Search local network for Intel AMT devices.');
        console.log('  AmtWifi           - Intel AMT Wifi interface settings.');
        console.log('  AmtWake           - Intel AMT Wake Alarms.');
        console.log('\r\nHelp on a specific action using:\r\n');
        console.log('  meshcmd help [action]');
        exit(1); return;
    }
    if (settings.action == 'help') {
        if (argv.length <= 2) {
            actions.shift();
            console.log('Help usage:\r\n\r\n  MeshCmd help [action]\r\n\r\nValid actions are: ' + actions.join(', ') + '.');
            exit(1); return;
        }
        var action = argv[2].toLowerCase();
        if (action == 'route') {
            console.log("The route action is used along with a MeshCentral account to map a local TCP port to a remote port on any computer on your MeshCentral account. This action requires many arguments, to avoid specifying them all it's best to download the meshaction.txt file from the web site and place it in the current folder. Example usage:\r\n\r\n  (Place meshaction.txt file in current folder)\r\n  meshcmd route --pass myAccountPassword");
        } else if (action == 'smbios') {
            console.log("SMBios action will display this computer's system management BIOS information. Example usage:\r\n\r\n  meshcmd smbios --out smbios.txt\r\n");
            console.log('\r\Optional arguments:\r\n');
            console.log('  --output [filename]    Optional filename to write the results to.');
        } else if (action == 'rawsmbios') {
            console.log("RawSMBios action will display this computer's system management BIOS information in raw hexdecimal form. Example usage:\r\n\r\n  meshcmd rawsmbios --out smbios.txt\r\n");
            console.log('\r\Optional arguments:\r\n');
            console.log('  --output [filename]    Optional filename to write the results to.');
        } else if (action == 'amtinfo') {
            console.log('AmtInfo action will get the version and activation state of Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Example usage:\r\n\r\n  meshcmd amtinfo');
        } else if ((action == 'amtversion') || (action == 'amtversions')) {
            console.log('AmtVersions will display all version information about Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Example usage:\r\n\r\n  meshcmd amtversions');
        } else if (action == 'amthashes') {
            console.log('Amthashes will display all trusted activations hashes for Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. These certificates hashes are used by Intel AMT when performing activation into ACM mode. Example usage:\r\n\r\n  meshcmd amthashes');
        } else if ((action == 'microlms') || (action == 'lms') || (action == 'amtlms')) {
            console.log('Starts MicroLMS on this computer, allowing local access to Intel AMT on TCP ports 16992 and 16993 when applicable. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. These certificates hashes are used by Intel AMT when performing activation into ACM mode. Example usage:\r\n\r\n  meshcmd microlms');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --noconsole            MeshCommander for LMS will no be available on port 16994.');
            console.log('\r\nRun as a background service:\r\n');
            console.log('  microlms install/uninstall/start/stop.');
        } else if (action == 'amtccm') {
            console.log('AmtCCM will attempt to activate Intel AMT on this computer into client control mode (CCM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be in "pre-provisioning" state for this command to work and a administrator password must be provided.');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --password [password]     Admin password used to activate Intel AMT.');
            console.log('\r\nor:\r\n');
            console.log('  --url [wss://server]      Url to the activation server.');
            console.log('  --tag [string]            Optional string sent to the server during activation.');
            console.log('  --serverhttpshash [hash]  Optional TLS server certificate hash.');
            console.log('  --profile [string]        Optional profile used for server activation.');
        } else if (action == 'amtacm') {
            console.log('AmtACM will attempt to activate Intel AMT on this computer into admin control mode (ACM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be in "pre-provisioning" state for this command to work. Example usage:\r\n\r\n  meshcmd amtacm --url [url]');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --url [wss://server]      The address of the Intel AMT activation server.');
            console.log('  --tag [string]            Optional string sent to the server during activation.');
            console.log('  --serverhttpshash [hash]  Optional TLS server certificate hash.');
            console.log('  --profile [string]        Optional profile used for server activation.');
        } else if (action == 'amtdeactivate') {
            console.log('AmtDeactivate will attempt to deactivate Intel AMT on this computer when in client control mode (CCM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be activated in client control mode for this command to work. Example usage:\r\n\r\n  meshcmd amtdeactivate');
        } else if (action == 'amtacmdeactivate') {
            console.log('AmtACMDeactivate will attempt to deactivate Intel AMT on this computer when in admin control mode (ACM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be activated in admin control mode for this command to work. Example usage:\r\n\r\n  meshcmd amtacmdeactivate');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --type [partial/full]  Specifies to perform partial or full unprovision.');
        } else if (action == 'amtuuid') {
            console.log('AmtUUID action will get the unique identifier of the local or remote Intel AMT computer. By default, the local UUID is obtained unless a host is specified. Intel AMT must be activated for this command to work. Example usage:\r\n\r\n  meshcmd amtuuid --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if ((action == 'amtloadwebapp') || (action == 'amtloadsmallwebapp') || (action == 'amtloadlargewebapp') || (action == 'amtclearwebapp') || (action == 'amtstoragestate')) {
            console.log('AmtLoadWebApp action will load MeshCommander into Intel AMT 11.6 or higher. If the computer is in ACM mode, MeshCommander will replace the default index.htm on HTTP/16992 or HTTPS/16993. If Intel AMT is in CCM mode, MeshCommander will be installed alongside the default web page and will be accessible in the "Web Applications" section. This action works on Intel AMT 11.6 and higher only. Example usage:\r\n\r\n  meshcmd amtloadwebapp --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtclearwebstorage') {
            console.log('AmtClearWebStorage will clear the web storage of Intel AMT, removing any loaded firmware version of MeshCommander. This command can clear the local or a remote Intel AMT computer. By default, the local computer storage is cleared unless a host is specified. Intel AMT must be activated for this command to work. This action works on Intel AMT 11.6 and higher only. Example usage:\r\n\r\n  meshcmd amtclearwebstorage --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtstoragestate') {
            console.log('AmtStorageState will display the content of the web storage of Intel AMT including any loaded firmware version of MeshCommander. This command can read the storage state of a local or remote Intel AMT computer. By default, the local computer storage state is displayed unless a host is specified. Intel AMT must be activated for this command to work. This action works on Intel AMT 11.6 and higher only. Example usage:\r\n\r\n  meshcmd amtstoragestate --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtsavestate') {
            console.log('AmtSaveState action will fetch all the entire state of Intel AMT and save it as a JSON file. This action will take multiple minutes to perform. The command will fetch the local computer state unless host is specified. Intel AMT must be ativated for this command to work. Example usage:\r\n\r\n  meshcmd amtsavestate --host 1.2.3.4 --user admin --pass mypassword --tls --output state.json');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --output [filename]    The output file for the Intel AMT state in JSON format.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtpresence') {
            console.log('AmtPresence will heartbeat a local Intel AMT watchdog agent. Example usage:\r\n\r\n  meshcmd amtpresence --agent B4B6A24C-255E-A75C-F5E8-B00B4D946AA7');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --agent [uuid]         The unique identifier of the watchdog agent.');
        } else if (action == 'amtscript') {
            console.log('AmtScript will run a .mescript file on the local or remote Intel AMT. Script files can be built using the MeshCommander script editor and be used to setup or perform actions on Intel AMT. Example usage:\r\n\r\n  meshcmd amtscript --script myscript.mescript --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --script [filename]    The script file to run on Intel AMT.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtpower') {
            console.log('AmtPower will get current pwoer state or send a reboot command to a remote Intel AMT device. Example usage:\r\n\r\n  meshcmd amtpower --reset --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --reset, --poweron, --poweroff, --powercycle, --sleep, --hibernate');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtnetwork') {
            console.log('AmtNetwork is used to get/set Intel AMT network interface configuration. Example usage:\r\n\r\n  meshcmd amtnetwork --host 1.2.3.4 --user admin --pass mypassword --dhcp');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --ipsync [0 or 1]         Change the wired IPSync setting on Intel AMT 7+');
            console.log('  --dhcp                    Change IPv4 wired interface to DHCP mode');
            console.log('  --static                  Change IPv4 wired interface to static IP mode');
            console.log('    --ip [1.2.3.4]          Static IPv4 address (required)');
            console.log('    --subnet [1.2.3.4]      Static IPv4 subnet mask');
            console.log('    --gateway [1.2.3.4]     Static IPv4 default gateway');
            console.log('    --dns [1.2.3.4]         Primary DNS IPv4 address');
            console.log('    --dns2 [1.2.3.4]        Secondary DNS IPv4 address');
        } else if (action == 'amtfeatures') {
            console.log('AmtFeatures is used to get/set Intel AMT feature configuration. Example usage:\r\n\r\n  meshcmd amtfeatures --host 1.2.3.4 --user admin --pass mypassword --tls --redir 1');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --consent [none/kvm/all]  Set Intel AMT user consent feature.');
            console.log('  --redir [0/1]             Set Intel AMT redirection port feature.');
            console.log('  --kvm [0/1]               Set Intel AMT KVM feature.');
            console.log('  --sol [0/1]               Set Intel AMT Serial-over-LAN feature.');
            console.log('  --ider [0/1]              Set Intel AMT IDE redirection feature.');
        } else if (action == 'meshcommander') {
            console.log('This action launched a local web server that hosts MeshCommander, a Intel AMT management console.');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --localport [port]     Local port used for the web server, 3000 is default.');
            console.log('\r\nRun as a background service:\r\n');
            console.log('  meshcommander install/uninstall/start/stop.');
        } else if (action == 'amteventlog') {
            console.log('AmtEventLog action will fetch the local or remote event log. Example usage:\r\n\r\n  meshcmd amteventlog --host 1.2.3.4 --user admin --pass mypassword --tls --output events.txt');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --output [filename]    The output file for the Intel AMT event log.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
            console.log('  --uuidoutput           Output with unique identifier as the filename.');
            console.log('  --json                 Output as a JSON format.');
        } else if (action == 'amtauditlog') {
            console.log('AmtAuditLog action will fetch the local or remote audit log. If used localy, no username/password is required. Example usage:\r\n\r\n  meshcmd amtauditlog --host 1.2.3.4 --user admin --pass mypassword --tls --output audit.json');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --output [filename]    The output file for the Intel AMT audit log.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
            console.log('  --uuidoutput           Output with unique identifier as the filename.');
            console.log('  --json                 Output as a JSON format.');
        } else if (action == 'amtider') {
            console.log('AmtIDER will mount a local disk images to a remote Intel AMT computer. Example usage:\r\n\r\n  meshcmd amtider --host 1.2.3.4 --user admin --pass mypassword --tls --floppy disk.img --cdrom disk.iso');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
            console.log('  --floppy [file]        Specifies .img file to be mounted as a flppy disk.');
            console.log('  --cdrom [file]         Specifies .img file to be mounted as a CDROM disk.');
            console.log('  --timeout [seconds]    Optional, disconnect after number of seconds without disk read.');
        } else if (action == 'amtscan') {
            console.log('AmtSCAN will look for Intel AMT device on the network. Example usage:\r\n\r\n  meshcmd amtscan --scan 192.168.1.0/24');
            console.log('\r\Required arguments:\r\n');
            console.log('  --scan [ip range]      The IP address range to perform the scan on.');
        } else if (action == 'amtwifi') {
            console.log('AmtWifi is used to get/set Intel AMT Wifi configuration. Example usage:\r\n\r\n  meshcmd amtwifi --host 1.2.3.4 --user admin --pass mypassword --list');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('  --[action]                Action options are list, add, del.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --list                    List Wifi profiles');
            console.log('  --add                     Add new Wifi profile');
            console.log('     --name                 New Wifi profile name');
            console.log('     --priority             Priority of this profile - default 0');
            console.log('     --ssid                 Wifi SSID');
            console.log('     --auth                 Wifi Authentication method (4 - WPA, 6 - WPA2/RSN) - default 6');
            console.log('     --enc                  Wifi Encryption type (3 - TKIP, 4 - CCMP) - default 3');
            console.log('     --psk                  Wifi password/pre-shared key');
            console.log('  --del [profile-name]      Delete new Wifi profile');            
        } else if (action == 'amtwake') {
            console.log('AmtWake is used to view/set/remote Intel AMT Wake Alarms. Example usage:\r\n\r\n  meshcmd amtwake --host 1.2.3.4 --user admin --pass mypassword --list');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('  --[action]                Action options are list, add, del.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --list                    List wake alarms profile');
            console.log('  --add [alarm-name]        Add new wake alarm');
            console.log('     --date [yyyy-mm-dd]    Alarm date in year-month-day format');
            console.log('     --time (hh:mm:ss)      Optional alarm time in hours:minutes:seconds format, default is 00:00:00.');
            console.log('     --interval (dd-hh-mm)  Optional alarm interval in days-hours-minutes format, default is alarm once.');
            console.log('     --deletewhendone       Indicates alarm is removed once triggered, default is to no remove.');
            console.log('  --del [alarm-name]        Remove a wake alarm');
        } else {
            actions.shift();
            console.log('Invalid action, usage:\r\n\r\n  meshcmd help [action]\r\n\r\nValid actions are: ' + actions.join(', ') + '.');
        }
        exit(1); return;
    }
    settings.action = settings.action.toLowerCase();
    debug(1, "Settings: " + JSON.stringify(settings));

    // Setup the proxy if needed
    if ((typeof settings.proxy) == 'string') {
        var proxy = settings.proxy.split(':'), proxyport = (proxy.length == 2) ? parseInt(proxy[1]) : 0;
        if ((proxy.length != 2) || (proxy[0].length < 1) || (proxyport < 1) || (proxyport > 65535)) { console.log('Invalid \"proxy\" specified, use --proxy [hostname]:[port].'); exit(1); return; }
        try { require('global-tunnel').initialize({ host: proxy[0], port: proxyport }); } catch (ex) { console.log(ex); exit(1); return; }
        console.log('Proxy set to ' + proxy[0] + ':' + proxyport);
    }

    if (settings.action == 'smbios') {
        // Display SM BIOS tables in raw form
        SMBiosTables = require('smbios');
        SMBiosTables.get(function (data) {
            var r = SMBiosTables.parse(data);
            var out = objToString(r, 0, '\r\n');
            if (settings.output == null) { console.log(out); } else { var file = fs.openSync(settings.output, 'w'); fs.writeSync(file, Buffer.from(out, 'utf8')); fs.closeSync(file); }
            exit(1);
        });
    } else if (settings.action == 'rawsmbios') {
        // Display SM BIOS tables in raw form
        SMBiosTables = require('smbios');
        SMBiosTables.get(function (data) {
            var out = '';
            for (var i in data) { var header = false; for (var j in data[i]) { if (data[i][j].length > 0) { if (header == false) { out += ('Table type #' + i + ((SMBiosTables.smTableTypes[i] == null) ? '' : (', ' + SMBiosTables.smTableTypes[i]))) + '\r\n'; header = true; } out += ('  ' + data[i][j].toString('hex')) + '\r\n'; } } }
            if (settings.output == null) { console.log(out); } else { var file = fs.openSync(settings.output, 'w'); fs.writeSync(file, Buffer.from(out, 'utf8')); fs.closeSync(file); }
            exit(1);
        });
    } else if (settings.action == 'route') {
        // MeshCentral Router, port map local TCP port to a remote computer
        if ((settings.localport == null) || (typeof settings.localport != 'number') || (settings.localport < 0) || (settings.localport > 65535)) { console.log('No or invalid \"localPort\" specified, use --localport [localport].'); exit(1); return; }
        if ((settings.remotenodeid == null) || (typeof settings.remotenodeid != 'string')) { console.log('No or invalid \"remoteNodeId\" specified.'); exit(1); return; }
        if (((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) && (settings.authcookie == null || typeof settings.authcookie != 'string' || settings.authcookie == '')) { console.log('No or invalid \"username\" specified, use --username [username].'); exit(1); return; }
        if (((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) && (settings.authcookie == null || typeof settings.authcookie != 'string' || settings.authcookie == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.serverid == null) || (typeof settings.serverid != 'string') || (settings.serverid.length != 96)) { console.log('No or invalid \"serverId\" specified.'); exit(1); return; }
        if ((settings.serverhttpshash == null) || (typeof settings.serverhttpshash != 'string') || (settings.serverhttpshash.length != 96)) { console.log('No or invalid \"serverHttpsHash\" specified.'); exit(1); return; }
        if ((settings.remoteport == null) || (typeof settings.remoteport != 'number') || (settings.remoteport < 0) || (settings.remoteport > 65535)) { console.log('No or invalid \"remotePort\" specified, use --remoteport [remoteport].'); exit(1); return; }
        if (settings.serverurl != null) { startRouter(); } else { discoverMeshServer(); } // Start MeshCentral Router
    } else if ((settings.action == 'amtloadwebapp') || (settings.action == 'amtloadsmallwebapp') || (settings.action == 'amtloadlargewebapp') || (settings.action == 'amtclearwebapp') || (settings.action == 'amtstoragestate')) { // Intel AMT Web Application Actions
        // Intel AMT 11.6+ Load MeshCommander into firmware
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { settings.hostname = '127.0.0.1'; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        digest = require('http-digest').create(settings.username, settings.password);
        digest.http = require('http');
        if (settings.action == 'amtstoragestate') {
            getAmtStorage(function (statusCode, data) { if (statusCode == 200) { console.log("Storage State: " + JSON.stringify(data, null, 2)); exit(); return; } else { console.log("Unable to read storage state."); exit(); return; } });
        } else {
            if (settings.action == 'amtloadwebapp') { settings.webapp = Medium_IntelAmtWebApp; }
            else if (settings.action == 'amtloadsmallwebapp') { settings.webapp = Small_IntelAmtWebApp; }
            else if (settings.action == 'amtloadlargewebapp') { settings.webapp = Large_IntelAmtWebApp; }
            else if (settings.action == 'amtclearwebapp') { settings.webapp = null; }
            nextStepStorageUpload();
        }
    } else if ((settings.action == 'amtversion') || (settings.action == 'amtversions') || (settings.action == 'amtver')) {
        // Display Intel ME versions
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getVersion(function (val) {
            console.log("BIOS Version = " + val.BiosVersion.toString());
            for (var version in val.Versions) {
                var extras = '', skuBits = ['', 'iQST', 'ASF', 'AMT', 'ISM', 'TPM', '', '', 'HomeIT', '', 'WOX', '', '', 'AT-p', 'Corporate', 'L3 Mgt Upgrade'];
                if (val.Versions[version].Description == 'Sku') {
                    var n = parseInt(val.Versions[version].Version), x = [], xx = 1;
                    for (var i = 0; i < skuBits.length; i++) { if ((n & xx) != 0) { x.push(skuBits[i]); } xx = xx << 1; }
                    if (x.length > 0) { extras = ' (' + x.join(', ') + ')' }
                }
                console.log(val.Versions[version].Description + " = " + val.Versions[version].Version + extras);
            }
            exit(1); return;
        });
    } else if (settings.action == 'amthashes') {
        // Display Intel AMT list of trusted hashes
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getHashHandles(function (handles) {
            exitOnCount = handles.length;
            for (var i = 0; i < handles.length; ++i) {
                this.getCertHashEntry(handles[i], function (result) {
                    console.log(result.name + ', (' + (result.isDefault ? 'Default' : '') + (result.isActive ? ', Active' : ', Disabled') + ')\r\n  ' + result.hashAlgorithmStr + ': ' + result.certificateHash);
                    if (--exitOnCount == 0) { exit(1); }
                });
            }
        });
    } else if (settings.action == 'netinfo') {
        // Display network information
        var interfaces = require('os').networkInterfaces();
        console.log(JSON.stringify(interfaces, 2, ' '));
        exit(0); return;
    } else if (settings.action == 'amtinfo') {
        // Display Intel AMT version and activation state
        mestate = {};
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getVersion(function (result) {
            if (result) {
                for (var version in result.Versions) {
                    if (result.Versions[version].Description == 'AMT') { mestate.ver = result.Versions[version].Version; }
                    if (result.Versions[version].Description == 'Sku') { mestate.sku = parseInt(result.Versions[version].Version); }
                }
            }
        });
        amtMei.getProvisioningState(function (result) { if (result) { mestate.ProvisioningState = result; } });
        amtMei.getProvisioningMode(function (result) { if (result) { mestate.ProvisioningMode = result; } });
        amtMei.getEHBCState(function (result) { if (result) { mestate.ehbc = result; } });
        amtMei.getControlMode(function (result) { if (result) { mestate.controlmode = result; } });
        amtMei.getMACAddresses(function (result) { if (result) { mestate.mac = result; } });
        amtMei.getLanInterfaceSettings(0, function (result) { if (result) { mestate.net0 = result; } });
        amtMei.getLanInterfaceSettings(1, function (result) { if (result) { mestate.net1 = result; } });
        amtMei.getUuid(function (result) { if ((result != null) && (result.uuid != null)) { mestate.uuid = result.uuid; } });
        amtMei.getDnsSuffix(function (result) {
            if (result) { mestate.dns = result; }
            if (mestate.ver && mestate.ProvisioningState && mestate.ProvisioningMode) {
                var str = 'Intel ME v' + mestate.ver;
                if (mestate.sku & 8) { str = 'Intel AMT v' + mestate.ver }
                else if (mestate.sku & 16) { str = 'Intel SM v' + mestate.ver }
                if (mestate.ProvisioningState.stateStr == 'PRE') { str += ', pre-provisioning state'; }
                else if (mestate.ProvisioningState.stateStr == 'IN') { str += ', in-provisioning state'; }
                else if (mestate.ProvisioningState.stateStr == 'POST') {
                    if (mestate.ProvisioningMode) {
                        if (mestate.controlmode) {
                            if (mestate.ProvisioningMode.modeStr == 'ENTERPRISE') { str += ', activated in ' + ["none", "client control mode", "admin control mode", "remote assistance mode"][mestate.controlmode.controlMode]; } else { str += ', activated in ' + mestate.ProvisioningMode.modeStr; }
                        } else {
                            str += ', activated in ' + mestate.ProvisioningMode.modeStr;
                        }
                    }
                }
                if ((mestate.ehbc) && (mestate.ehbc.EHBC == true)) { str += ', EHBC enabled'; }
                str += '.';
                if (mestate.net0 != null) { str += '\r\nWired ' + ((mestate.net0.enabled == 1) ? 'Enabled' : 'Disabled') + ((mestate.net0.dhcpEnabled == 1) ? ', DHCP' : ', Static') + ', ' + mestate.net0.mac + (mestate.net0.address == '0.0.0.0' ? '' : (', ' + mestate.net0.address)); }
                if (mestate.net1 != null) { str += '\r\nWireless ' + ((mestate.net1.enabled == 1) ? 'Enabled' : 'Disabled') + ((mestate.net1.dhcpEnabled == 1) ? ', DHCP' : ', Static') + ', ' + mestate.net1.mac + (mestate.net1.address == '0.0.0.0' ? '' : (', ' + mestate.net1.address)); }
                if ((mestate.ProvisioningState.stateStr != 'POST') && (mestate.net0 != null) && (mestate.net0.enabled == 1)) {
                    if (mestate.dns != null) {
                        // Intel AMT has a trusted DNS suffix set, use that one.
                        str += '\r\nTrusted DNS suffix: ' + mestate.dns;
                    } else {
                        // Look for the DNS suffix for the Intel AMT Ethernet interface
                        var fqdn = null, interfaces = require('os').networkInterfaces();
                        for (var i in interfaces) {
                            for (var j in interfaces[i]) {
                                if ((interfaces[i][j].mac == mestate.net0.mac) && (interfaces[i][j].fqdn != null) && (interfaces[i][j].fqdn != '')) { fqdn = interfaces[i][j].fqdn; }
                            }
                        }
                        if (fqdn != null) { str += '\r\nDNS suffix: ' + fqdn; }
                    }
                }
                console.log(str + '.');
            } else {
                console.log('Intel(R) AMT not supported.');
            }
            exit(1);
        });
    } else if (settings.action == 'amtinfodebug') {
        // Display Intel AMT version and activation state
        mestate = {};
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getVersion(function (result) { console.log('getVersion: ' + JSON.stringify(result)); });
        amtMei.getProvisioningState(function (result) { console.log('getProvisioningState: ' + JSON.stringify(result)); });
        amtMei.getProvisioningMode(function (result) { console.log('getProvisioningMode: ' + JSON.stringify(result)); });
        amtMei.getEHBCState(function (result) { if (result) { console.log('getEHBCState: ' + JSON.stringify(result)); } });
        amtMei.getControlMode(function (result) { if (result) { console.log('getControlMode: ' + JSON.stringify(result)); } });
        amtMei.getMACAddresses(function (result) { if (result) { console.log('getMACAddresses: ' + JSON.stringify(result)); } });
        amtMei.getLanInterfaceSettings(0, function (result) { console.log('getLanInterfaceSettings0: ' + JSON.stringify(result)); });
        amtMei.getLanInterfaceSettings(1, function (result) { console.log('getLanInterfaceSettings1: ' + JSON.stringify(result)); });
        amtMei.getUuid(function (result) { console.log('getUuid: ' + JSON.stringify(result)); });
        amtMei.getDnsSuffix(function (result) { console.log('getDnsSuffix: ' + JSON.stringify(result)); exit(1); });
    } else if (settings.action == 'amtsavestate') {
        // Save the entire state of Intel AMT info a JSON file
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { settings.hostname = '127.0.0.1'; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((settings.output == null) || (typeof settings.output != 'string') || (settings.output == '')) { console.log('No or invalid \"output\" file specified, use --output [filename].'); exit(1); return; }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        saveEntireAmtState();
    } else if ((settings.action == 'microlms') || (settings.action == 'amtlms') || (settings.action == 'lms')) {
        // Start Intel AMT MicroLMS
        startLms(function (state) {
            console.log(['MicroLMS did not start. Must run as administrator or LMS already active.', 'MicroLMS started.', 'MicroLMS started, MeshCommander on HTTP/16994.', 'MEI error'][state]);
            if (((state == 0) || (state == 3)) && (settings.noconsole === true)) { exit(0); } else { console.log('Press ctrl-c to exit.'); }
        }, settings.noconsole !== true);
    } else if (settings.action == 'amtpresence') {
        // Heartbeat a Intel AMT watchdog
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((settings.agent == null) || (typeof settings.agent != 'string') || (settings.agent == '')) { console.log('No or invalid \"agent\" specified, use --agent [agent].'); exit(1); return; }
        performAmtAgentPresence();
    } else if (settings.action == 'amtscript') {
        // Start running a MEScript
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { settings.hostname = '127.0.0.1'; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        //if ((settings.script == null) || (typeof settings.script != 'string') || (settings.script == '')) { if (mescriptJSON != '') { settings.scriptjson = mescriptJSON; } else { console.log('No or invalid \"script\" file specified, use --script [filename].'); exit(1); return; } }
        if ((settings.script == null) || (typeof settings.script != 'string') || (settings.script == '')) { console.log('No or invalid \"script\" file specified, use --script [filename].'); exit(1); return; }
        startMeScript();
    } else if (settings.action == 'amtuuid') {
        // Start running
        if (settings.hostname != null) {
            if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
            if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        getAmtUuid();
    } else if (settings.action == 'amtccm') {
        // Start activation to CCM 
        if (((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) && ((settings.url == null) || (typeof settings.url != 'string') || (settings.url == ''))) { console.log('No or invalid parameters specified, use --password [password] or --url [url].'); exit(1); return; }
        if ((typeof settings.profile != 'string') || (settings.profile == '')) { settings.profile = null; }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        if (settings.password != null) { activeToCCM(); } else { activeToACM(); }
    } else if (settings.action == 'amtacm') {
        // Start activation to ACM 
        if ((settings.url == null) || (typeof settings.url != 'string') || (settings.url == '')) { console.log('No activation server URL specified, use --url [url].'); exit(1); return; }
        if ((typeof settings.profile != 'string') || (settings.profile == '')) { settings.profile = null; }
        debug(1, "Settings: " + JSON.stringify(settings));
        activeToACM();
    } else if (settings.action == 'amtdiscover') {
        // Intel AMT server discovery, tell the server the state of Intel AMT.
        if ((settings.url == null) || (typeof settings.url != 'string') || (settings.url == '')) { console.log('No activation server URL specified, use --url [url].'); exit(1); return; }
        debug(1, "Settings: " + JSON.stringify(settings));
        activeToACM();
    } else if (settings.action == 'amtdeactivate') {
        // Deactivate CCM
        debug(1, "Settings: " + JSON.stringify(settings));
        deactivateCCM();
    } else if (settings.action == 'amtacmdeactivate') {
        // Deactivate ACM
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.type == null) || (typeof settings.type != 'string') || (settings.type == '')) { console.log('Unprovisioning \"type\" must be specified, use --type [partial/full].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if (settings.tls == null) { settings.tls = false; }
        debug(1, "Settings: " + JSON.stringify(settings));
        deactivateACM();
    } else if (settings.action == 'meshcommander') { // Start MeshCommander
        startMeshCommander();
        //} else if (settings.action == 'amtdisable') { // Disable AMT Network Interface
        //    amtDisable();
    } else if (settings.action == 'amtscan') {
        // Scan the network for Intel AMT devices
        if ((settings.scan == null) || (typeof settings.scan != 'string') || (settings.scan == '')) { console.log('No or invalid \"scan\" specified, use --scan [ip range].'); exit(1); return; }
        console.log('Scanning: ' + settings.scan + '...');
        var AMTScannerModule = require('amt-scanner');
        var amtscanner = new AMTScannerModule(), r = '';
        amtscanner.scan(settings.scan, 2000, function (data) {
            if (data.length > 0) {
                r = '', pstates = ['NotActivated', 'InActivation', 'Activated'];
                for (var i in data) {
                    var x = data[i];
                    if (r != '') { r += '\r\n'; }
                    r += x.address + ' - Intel AMT v' + x.majorVersion + '.' + x.minorVersion;
                    if (x.provisioningState < 3) { r += (', ' + pstates[x.provisioningState]); }
                    if (x.provisioningState == 2) { r += (', ' + x.openPorts.join(', ')); }
                    r += '.';
                }
            } else {
                r = 'No Intel AMT found.';
            }
            console.log(r);
            exit(1);
        });
    } else if (settings.action == 'amtauditlog') { // Read the Intel AMT audit log
        if (settings.hostname != null) {
            if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
            if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        } else { settings.hostname = '127.0.0.1'; }
        readAmtAuditLog();
    } else if (settings.action == 'amteventlog') { // Read the Intel AMT audit log
        if (settings.hostname != null) { 
            if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
            if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        } else { settings.hostname = '127.0.0.1'; }
        readAmtEventLog();
    } else if (settings.action == 'amtider') { // Remote mount IDER image
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { console.log('No or invalid \"hostname\" specified, use --hostname [password].'); exit(1); return; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((settings.floppy == null) || (typeof settings.floppy != 'string') || (settings.floppy == '')) { settings.floppy = null; }
        if ((settings.cdrom == null) || (typeof settings.cdrom != 'string') || (settings.cdrom == '')) { settings.cdrom = null; }
        if ((settings.floppy == null) && (settings.cdrom == null)) { console.log('No or invalid \"floppy\" or \"cdrom\" specified, use --floppy [file] or --cdrom [file].'); exit(1); return; }
        performIder();
    } else if (settings.action == 'amtnetwork') { // Perform remote Intel AMT wired IPv4 configuration operation
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        performAmtNetConfig(args);
    } else if (settings.action == 'amtwifi') { // Perform remote Intel AMT Wifi configuration operation
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if (args.add != null) {
            if ((args.name == null) || (typeof args.name != 'string') || args.name == '') { console.log("Wifi profile name is required."); exit(1); return; }
            if ((args.ssid == null) || (typeof args.ssid != 'string') || args.ssid == '') { console.log("Wifi SSID is required."); exit(1); return; }
            if ((args.psk == null) || (typeof args.psk != 'string') || args.psk == '') { console.log("Wifi password is required."); exit(1); return; }
        }
        if (args.del !=null) {
            if ((settings.name == null) || (typeof settings.name != 'string') || settings.name == '') { console.log("Wifi profile name is required."); exit(1); return; }
        }
        performAmtWifiConfig(args);
    } else if (settings.action == 'amtwake') { // Perform remote Intel AMT wake alarm operations
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((args.del != null) && ((typeof args.del != 'string') || args.del == '')) { console.log("Alarm name is required (--del [name])."); exit(1); return; }
        if (args.add != null) {
            if (((typeof args.add != 'string') || args.add == '')) { console.log("Wake alarm name is required (--add [name])."); exit(1); return; }
            if (((typeof args.date != 'string') || args.data == '')) { console.log("Wake alarm date is required (--date [yyyy-mm-dd])."); exit(1); return; }
        }
        performAmtWakeConfig(args);
    } else if (settings.action == 'amtfeatures') { // Perform remote Intel AMT feature configuration operation
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        performAmtFeatureConfig(args);
    } else if (settings.action == 'amtpower') { // Perform remote Intel AMT power operation
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { console.log('No or invalid \"hostname\" specified, use --hostname [host].'); exit(1); return; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }

        /*
        2 = Power On
        3 = Sleep - Light
        4 = Sleep - Deep
        5 = Power Cycle (Off Soft)
        6 = Power Off - Hard
        7 = Hibernate
        8 = Power Off - Soft
        9 = Power Cycle (Off Hard)
        10 = Master Bus Reset
        11 = Diagnostic Interrupt (NMI)
        12 = Power Off - Soft Graceful
        13 = Power Off - Hard Graceful
        14 = Master Bus Reset Graceful
        15 = Power Cycle (Off - Soft Graceful)
        16 = Power Cycle (Off - Hard Graceful)
        */

        settings.poweraction = 0;
        if (args.poweron) { settings.poweraction = 2; }
        if (args.sleep) { settings.poweraction = 3; }
        if (args.powercycle) { settings.poweraction = 5; }
        if (args.poweroff) { settings.poweraction = 6; }
        if (args.hibernate) { settings.poweraction = 7; }
        if (args.reset) { settings.poweraction = 10; }
        //if (settings.poweraction == 0) { console.log('No power action, specify --poweron, --sleep, --powercycle, --poweroff, --hibernate, --reset.'); exit(1); return; }
        performAmtPowerAction();
    } else {
        console.log('Invalid \"action\" specified.'); exit(1); return;
    }
}

//
// Intel AMT Agent Presence
//

function performAmtAgentPresence() { startLms(function () { tempWatchdogTimer = setTimeout(performAmtAgentPresenceRegister, 3000); }); }

function performAmtAgentPresenceRegister() {
    // Setup the Intel AMT WSMAN stack
    tempWatchdogTimer = null;
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, '127.0.0.1', settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);

    // Register the watchdog
    watchdog = { DeviceID: Buffer.from(guidToStr(settings.agent.split('-').join('')).split('-').join(''), 'hex').toString('base64'), Retry: 0 };
    amtstack.AMT_AgentPresenceWatchdog_RegisterAgent(performAmtAgentPresenceRegisterRetry, watchdog, watchdog.Seq, { 'DeviceID': watchdog.DeviceID });
}

// Called after the agent is registered
function performAmtAgentPresenceRegisterRetry(stack, name, response, status, watchdog) {
    if ((status == 200) && (response.Body.SessionSequenceNumber) && (response.Body.TimeoutInterval)) {
        console.log('Asserting presence of the watchdog...');
        watchdog.Seq = response.Body.SessionSequenceNumber;
        watchdog.Interval = response.Body.TimeoutInterval * 800;
        watchdog.Retry = 0;
        tempWatchdogTimer = setTimeout(performAmtAgentPresenceAssert, watchdog.Interval);
    } else {
        debug(1, 'Failed to register, status = ' + status);
        watchdog.Retry++;
        if (watchdog.Retry < 5) {
            tempWatchdogTimer = setTimeout(function () { amtstack.AMT_AgentPresenceWatchdog_RegisterAgent(performAmtAgentPresenceRegisterRetry, watchdog, watchdog.Seq, { 'DeviceID': watchdog.DeviceID }); }, 1000);
        } else {
            console.log('Failed to register this watchdog.');
            process.exit(0);
        }
    }
}

// Start a new agent assert
function performAmtAgentPresenceAssert() {
    watchdog.Seq++;
    amtstack.AMT_AgentPresenceWatchdog_AssertPresence(watchdog.Seq, performAmtAgentPresenceAssertRetry, watchdog, 0, { 'DeviceID': watchdog.DeviceID });
}

// Called after the agent is asserted
function performAmtAgentPresenceAssertRetry(stack, name, response, status, watchdog) {
    if (status == 200) {
        debug(1, 'Successful assert, sequence = ' + watchdog.Seq);
        watchdog.Retry = 0;
        tempWatchdogTimer = setTimeout(performAmtAgentPresenceAssert, watchdog.Interval);
    } else {
        debug(1, 'Failed to assert, status = ' + status);
        watchdog.Retry++;
        if (watchdog.Retry < 5) {
            amtstack.AMT_AgentPresenceWatchdog_AssertPresence(watchdog.Seq, performAmtAgentPresenceAssertRetry, watchdog, 0, { 'DeviceID': watchdog.DeviceID });
        } else {
            console.log('Failed to assert presence on this watchdog.');
            process.exit(0);
        }
    }
}

function performAmtAgentPresenceEx5(stack, name, response, status, watchdog) {
    console.log('b', status, watchdog);
    if (status == 200) {
        watchdog.Retry = 0;
    } else {
        watchdog.Retry++;
        if (watchdog.Retry < 5) {
            amtstack.AMT_AgentPresenceWatchdog_AssertPresence(watchdog.Seq, performAmtAgentPresenceEx4, watchdog, 0, { 'DeviceID': watchdog.DeviceID });
        } else {
            console.log('Failed to assert presence on this watchdog.');
            process.exit(0);
        }
    }
}


//
// Intel AMT Event Log
//

function readAmtEventLog() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(readAmtEventLogEx);
    } else {
        readAmtEventLogEx(9999);
    }
}

function readAmtEventLogEx(x) {
    if (x == 9999) {
        var transport = require('amt-wsman-duk');
        var wsman = require('amt-wsman');
        var amt = require('amt');
        wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
        amtstack = new amt(wsstack);
        amtstack.GetMessageLog(readAmtEventLogEx2);
    } else {
        osamtstack.GetMessageLog(readAmtEventLogEx2);
    }
}

function readAmtEventLogEx2(stack, messages) {
    if (messages == null) {
        console.log('Unable to get event log.');
    } else {
        var out = '';
        if (settings.json) {
            out = JSON.stringify(messages, 4, ' ');
        } else {
            for (var i in messages) { out += messages[i].Time + ', ' + messages[i].EntityStr + ', ' + messages[i].Desc + ', ' + messages[i].EventSeverity + '\r\n'; }
        }
        if ((settings.output == null || settings.output == "") && !settings.uuidoutput) { console.log(out); exit(1); }
        else {
            try {
                if (settings.output) {
                    var file = fs.openSync(settings.output, 'w');
                    fs.writeSync(file, Buffer.from(out));
                    fs.closeSync(file);
                    exit(1);
                }
                else if (settings.uuidoutput) {
                    var destpath = null; //Dest path where messagelog file will be saved
                    if ((typeof settings.uuidoutput) == 'string') {
                        fs.statSync(settings.uuidoutput).isDirectory();//Validate directory path
                        destpath = settings.uuidoutput;
                    }
                    //Generate uuid and append it to dest path
                    stack.Get('CIM_ComputerSystemPackage', function (obj, name, response, xstatus, tag) {
                        if (xstatus == 200) {
                            var eventlogsfile = path.join(destpath, guidToStr(response.Body.PlatformGUID.toLowerCase() + '_Event' + (settings.json ? '.json' : '.csv')));
                            var file = fs.openSync(eventlogsfile, 'w');
                            fs.writeSync(file, Buffer.from(out));
                            fs.closeSync(file);
                        } else {
                            console.log('Intel AMT is not available or not activated, status = ' + status + '.');
                        } exit(1);
                    });
                }
                else{
                    console.log('Invalid action, usage:\r\n\r\n meshcmd help amtauditlog');
                    exit(1);
                }
            }
            catch (e) {
                console.log(e);
                exit(1);
            }
        }
    }
}

//
// Intel AMT Audit Log
//

function readAmtAuditLog() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(readAmtAuditLogEx);
    } else {
        readAmtAuditLogEx(9999);
    }
}

function readAmtAuditLogEx(x) {
    if (x == 9999) {
        var transport = require('amt-wsman-duk');
        var wsman = require('amt-wsman');
        var amt = require('amt');
        wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
        amtstack = new amt(wsstack);
        amtstack.GetAuditLog(readAmtAuditLogEx2);
    } else {
        osamtstack.GetAuditLog(readAmtAuditLogEx2);
    }
}

function readAmtAuditLogEx2(stack, response, status) {
    if (status != 200) {
        console.log('Unable to get audit log, status = ' + status + '.');
    } else {
        var out = '';
        if (settings.json) {
            out = JSON.stringify(response, 4, ' ');
        } else {
            for (var i in response) {
                var name = ((response[i].Initiator != '') ? (response[i].Initiator + ': ') : '')
                out += (response[i].Time + ' - ' + name + response[i].Event + '\r\n');
            }
        }
        if ((settings.output == null || settings.output == "") && !settings.uuidoutput) { console.log(out); exit(1); }
        else {
            try {
                if (settings.output) {
                    var file = fs.openSync(settings.output, 'w');
                    fs.writeSync(file, Buffer.from(out));
                    fs.closeSync(file);
                    exit(1);
                }
                else if (settings.uuidoutput) {
                    var destpath = null; //Dest path where auditlog file will be saved
                    if ((typeof settings.uuidoutput) == 'string') {
                        fs.statSync(settings.uuidoutput).isDirectory();//Validate directory path
                        destpath = settings.uuidoutput;
                    }
                    //Generate uuid and append it to dest path
                    stack.Get('CIM_ComputerSystemPackage', function (obj, name, response, xstatus, tag) {
                        if (xstatus == 200) {
                            var auditlogsfile = path.join(destpath, guidToStr(response.Body.PlatformGUID.toLowerCase() + '_Audit' + (settings.json ? '.json' : '.csv')));
                            var file = fs.openSync(auditlogsfile, 'w');
                            fs.writeSync(file, Buffer.from(out));
                            fs.closeSync(file);
                        } else {
                            console.log('Intel AMT is not available or not activated, status = ' + status + '.');
                        } exit(1);
                    });
                }
                else{
                    console.log('Invalid action, usage:\r\n\r\n meshcmd help amtauditlog');
                    exit(1);
                }
            }
            catch (e) {
                console.log(e);
                exit(1);
            }
        }
    }
}

//
// Disable AMT Network
//

//function amtDisable() {
//    settings.noconsole = true;
//    startLms(amtDisableEx);
//}

//function amtDisableEx(stack, response, status) {
//    //console.log(osamtstack);
//    osamtstack.Get('AMT_EthernetPortSettings', function (stack, name, response, status) {
//        console.log(response.Body);
//    });
//}

//
// MeshCommander local web server
//

function startMeshCommander() {
    if (settings.localport == null) { settings.localport = 3000; }

    // Start the web server
    var http = require('http');
    webServer = http.createServer();
    webServer.listen(settings.localport);
    webServer.wsList = {};
    webServer.wsListIndex = 0;
    webServer.on('upgrade', function (req, socket, head) {
        //console.log("WebSocket for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/webrelay.ashx': // MeshCommander relay channel
                var ws = socket.upgradeWebSocket();
                socket.ws = ws;
                ws.wsIndex = ++webServer.wsListIndex;
                webServer.wsList[ws.wsIndex] = ws; // Keep a reference so the websocket and forwarder don't get disposed.
                ws.pause();

                // We got a new web socket connection, initiate a TCP connection to the target Intel AMT host/port.
                var webargs = parseUrlArguments(req.url);
                if (webargs.p) { webargs.p = parseInt(webargs.p); }
                if (webargs.tls) { webargs.tls = parseInt(webargs.tls); }
                if (webargs.tls1only) { webargs.tls1only = parseInt(webargs.tls1only); }
                if (webargs.port) { webargs.port = parseInt(webargs.port); }
                debug(1, 'Opening web socket connection to ' + webargs.host + ':' + webargs.port + '.');
                //console.log('Opening web socket connection to ' + webargs.host + ':' + webargs.port + '.');
                if (webargs.tls == 0) {
                    // If this is TCP (without TLS) set a normal TCP socket
                    var net = require('net');
                    ws.forwardclient = net.connect({ host: webargs.host, port: webargs.port })
                    ws.forwardclient.on('connect', function () { debug(1, 'Connected TCP to ' + webargs.host + ':' + webargs.port + '.'); this.pipe(this.ws, { end: false }); this.ws.pipe(this, { end: false }); });
                    ws.forwardclient.on('error', function () { debug(1, 'TCP connection error to ' + webargs.host + ':' + webargs.port + '.'); try { this.ws.end(); } catch (e) { } });
                    ws.forwardclient.ws = ws;
                } else {
                    // If TLS is going to be used, setup a TLS socket
                    var tls = require('tls');
                    var tlsoptions = { host: webargs.host, port: webargs.port, rejectUnauthorized: false };
                    if (webargs.tls1only == 1) { tlsoptions.secureProtocol = 'TLSv1_method'; }
                    ws.forwardclient = tls.connect(tlsoptions, function () { debug(1, 'Connected TLS to ' + webargs.host + ':' + webargs.port + '.'); this.pipe(this.ws, { end: false }); this.ws.pipe(this, { end: false }); });
                    ws.forwardclient.on('error', function () { debug(1, 'TLS connection error to ' + webargs.host + ':' + webargs.port + '.'); try { this.ws.end(); } catch (e) { } });
                    ws.forwardclient.ws = ws;
                }

                // Handle pipe closure
                ws.on('end', function () { debug(1, 'Disconnected from ' + webargs.host + ':' + webargs.port + '.'); try { this.forwardclient.end(); } catch (e) { } delete webServer.wsList[this.wsIndex]; });
                ws.forwardclient.on('end', function () { try { this.ws.end(); } catch (e) { } });

                break;
            default:
                socket.end();
                break;
        }
    });
    webServer.on('request', function (req, rsp) {
        //console.log("WebRequest for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/': // Serve MeshCommander Web Application
                var meshcommander = null;
                try { meshcommander = fs.readFileSync('meshcommander.htm'); } catch (e) { }
                if (meshcommander != null) {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Transfer-Encoding': 'chunked' });
                    rsp.end(meshcommander);
                } else {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Content-Encoding': 'gzip', 'Transfer-Encoding': 'chunked', ETag: FullSite_IntelAmtLocalWebApp_etag });
                    rsp.end(Buffer.from(FullSite_IntelAmtLocalWebApp, 'base64'));
                }
                break;
            default: // Unknown request
                rsp.statusCode = 404;
                rsp.statusMessage = "Not Found";
                rsp.end();
                break;
        }
    });
    console.log('MeshCommander running on HTTP port ' + settings.localport + '.');
    console.log('Press ctrl-c to exit.');
}


//
// Deactivate Intel AMT CCM
//

// When called, this will use MEI to deactivate Intel AMT when it's in CCM mode. Simply calls "unprovision" on MEI and checks the return code.
function deactivateCCM() {
    var amtMeiModule, amtMei;
    try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
    amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    amtMei.unprovision(1, function (status) { if (status == 0) { console.log('Success'); } else { console.log('Error ' + status); } exit(1); });
}


//
// Activate Intel AMT to CCM
//

function activeToCCM() {
    // See if MicroLMS needs to be started and setup the $$OsAdmin wsman stack
    settings.noconsole = true;
    startLms(activeToCCMEx); // TODO: Fix this so that it works even if LMS already running.
}

function activeToCCMEx(state) {
    osamtstack.BatchEnum(null, ['*AMT_GeneralSettings', '*IPS_HostBasedSetupService'], activeToCCMEx2);
}

function activeToCCMEx2(stack, name, responses, status) {
    if (status != 200) { console.log('Failed to fetch activation status, status ' + status); exit(1); }
    else if (responses['IPS_HostBasedSetupService'].response['AllowedControlModes'].length != 2) { console.log('Client control mode activation not allowed'); exit(1); }
    else { osamtstack.IPS_HostBasedSetupService_Setup(2, md5hex('admin:' + responses['AMT_GeneralSettings'].response['DigestRealm'] + ':' + settings.password).substring(0, 32), null, null, null, null, activeToCCMEx3); }
}

function activeToCCMEx3(stack, name, responses, status) {
    if (status != 200) { console.log('Failed to activate, status ' + status); }
    else if (responses.Body.ReturnValue != 0) { console.log('Client control mode activation failed: ' + responses.Body.ReturnValueStr); }
    else { console.log('Success'); exit(0); }
    exit(1);
}




//
// Deactivate Intel AMT ACM
//

// When called, this will use MEI to deactivate Intel AMT when it's in ACM mode. Calls "unprovision" on MEI and checks the return code.
function deactivateACM() {
    settings.noconsole = true;
    startLms(deactivateACMEx);
}

function deactivateACMEx() {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.Get("AMT_SetupAndConfigurationService", function (stack, name, responses, status) {
        if (status !== 200) {
            console.log('Command not allowed.  Status: ' + status);
            exit(1);
        } else {
            var sacs = responses.Body;
            if (sacs.ZeroTouchConfigurationEnabled == true) { sacs.ZeroTouchConfigurationEnabled = true; }
            amtstack.Put("AMT_SetupAndConfigurationService", sacs, function (stack, name, responses, status) {
                if (settings.type == 'full') {
                    amtstack.AMT_SetupAndConfigurationService_Unprovision(2, function (stack, name, responses, status) {
                        if (status != 200) { console.log('Failed to fully unconfigure AMT, status ' + status); exit(1); }
                        else if (responses.Body.ReturnValue != 0) { console.log('Unprovision failed: ' + responses.Body.ReturnValueStr); exit(1); }
                        else { console.log('AMT fully unprovisioned.'); exit(0); }
                    });
                } else {
                    console.log('Only full unprovision is currently supported.');
                    exit(0);
                }
                //} else if (settings.type == 'partial') {
                //    amtstack.AMT_SetupAndConfigurationService_PartialUnprovision(null, function (stack, name, responses, status) {
                //        if (status != 200) { console.log('Failed to partially unconfigure AMT, status ' + status); exit(1); }
                //        else if (responses.Body.ReturnValue != 0) { console.log('Unprovision failed: ' + responses.Body.ReturnValueStr); exit(1); }
                //        else { console.log('AMT partially unprovisioned.'); exit(0); }
                //    });
                //}
            });
        }
    });
}

//
// Get Intel AMT activation hashes
//

var trustedHashes = null;
function getTrustedHashes(amtMei, func, tag) {
    if (trustedHashes != null) { func(tag); }
    trustedHashes = [];
    amtMei.getHashHandles(function (handles) {
        var exitOnCount = handles.length;
        for (var i = 0; i < handles.length; ++i) {
            this.getCertHashEntry(handles[i], function (result) {
                if (result.isActive == 1) { trustedHashes.push(result.certificateHash.toLowerCase()); }
                if (--exitOnCount == 0) { func(tag); }
            });
        }
    });
}

//
// Activate Intel AMT to with server (ACM or CCM)
//

function activeToACM() {
    console.log('Starting Intel AMT activation attempt...');
    settings.noconsole = true;

    // Display Intel AMT version and activation state
    mestate = {};
    var amtMeiModule, amtMei;
    try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
    amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    amtMei.getProvisioningState(function (result) { if (result) { mestate.ProvisioningState = result; } });
    amtMei.getVersion(function (val) { mestate.vers = {}; if (val != null) { for (var version in val.Versions) { mestate.vers[val.Versions[version].Description] = val.Versions[version].Version; } } });
    amtMei.getLanInterfaceSettings(0, function (result) { if (result) { mestate.net0 = result; } });
    amtMei.getUuid(function (result) { if ((result != null) && (result.uuid != null)) { mestate.uuid = result.uuid; } });
    amtMei.getControlMode(function (result) { if (result != null) { mestate.controlMode = result.controlMode; } }); // controlMode: 0 = NoActivated, 1 = CCM, 2 = ACM
    amtMei.getDnsSuffix(function (result) {
        if ((mestate.vers == null) || (mestate.vers['AMT'] == null)) { console.log("Unable to get Intel AMT version."); exit(100); return; }
        if (mestate.ProvisioningState == null) { console.log("Unable to read Intel AMT activation state."); exit(100); return; }
        if ((settings.action != 'amtdiscover') && (mestate.controlMode == 2)) { console.log("Intel AMT already activation in admin control mode."); exit(100); return; }
        if (mestate.uuid == null) { console.log("Unable to get Intel AMT UUID."); exit(100); return; }
        var fqdn = null;
        if ((mestate.net0 == null) && (meinfo.net0.enabled != 0)) { console.log("No Intel AMT wired interface, can't perform ACM activation."); exit(100); return; }
        if (result) { fqdn = result; } // If Intel AMT has a trusted DNS suffix set, use that one.
        else {
            // Look for the DNS suffix for the Intel AMT Ethernet interface
            var interfaces = require('os').networkInterfaces();
            for (var i in interfaces) {
                for (var j in interfaces[i]) {
                    if ((interfaces[i][j].mac == mestate.net0.mac) && (interfaces[i][j].fqdn != null) && (interfaces[i][j].fqdn != '')) { fqdn = interfaces[i][j].fqdn; }
                }
            }
        }
        if (fqdn != null) {
            settings.fqdn = fqdn;
            settings.uuid = mestate.uuid;
            getTrustedHashes(amtMei, function () { startLms(getFwNonce, amtMei); });
        } else {
            console.log("Trusted DNS suffix not set, can't perform ACM activation."); exit(100); return;
        }
    });
}

// Gets the FWNonce from AMT and saves it to a file.  
function getFwNonce() {
    osamtstack.BatchEnum(null, ['*AMT_GeneralSettings', '*IPS_HostBasedSetupService'], function (stack, name, responses, status) {
        if (status != 200) { console.log("Unable to get firmware activation nonce, status=" + status); exit(100); return; }
        var fwNonce = responses['IPS_HostBasedSetupService'].response['ConfigurationNonce'];
        var digestRealm = responses['AMT_GeneralSettings'].response['DigestRealm'];
        var allowedModes = responses['IPS_HostBasedSetupService'].response['AllowedControlModes']; // 1 = CCM, 2 = ACM
        activeToACMEx(fwNonce, settings.fqdn, digestRealm, settings.uuid, allowedModes);
    });
}

// Connect to the activation server and perform ACM activation
function activeToACMEx(fwNonce, dnsSuffix, digestRealm, uuid, allowedModes) {
    console.log('FQDN:   ' + dnsSuffix);
    console.log('UUID:   ' + uuid);
    console.log('Realm:  ' + digestRealm);
    console.log('Nonce:  ' + fwNonce);
    console.log('Connecting to ' + settings.url);

    // Establish WebSocket connection to activation server
    var options = http.parseUri(settings.url);
    options.checkServerIdentity = onVerifyServer;
    options.rejectUnauthorized = false;
    var connection = http.request(options);
    connection.on('upgrade', function (response, socket) {
        settings.xxsocket = socket;
        if (settings.action == 'amtdiscover') { console.log('Connected, performing discovery...'); } else { console.log('Connected, requesting activation...'); }
        socket.on('end', function () { console.log('Connection closed'); exit(0); });
        socket.on('error', function () { console.log('Connection error'); exit(100); });
        socket.on('data', function (data) {
            // Parse and check the response
            var cmd = null;
            try { cmd = JSON.parse(data); } catch (ex) { console.log('Unable to parse server response: ' + data); exit(100); return; }
            if (typeof cmd != 'object') { console.log('Invalid server response: ' + cmd); exit(100); return; }
            if (typeof cmd.errorText == 'string') { console.log('Server error: ' + cmd.errorText); exit(100); return; }
            if (typeof cmd.messageText == 'string') { console.log('Server: ' + cmd.messageText); return; }
            switch (cmd.action) {
                case 'acmactivate': {
                    // Server responded with ACM activation response
                    if (typeof cmd.signature != 'string') { console.log('Invalid server signature'); exit(100); return; }
                    if (typeof cmd.password != 'string') { console.log('Invalid server password'); exit(100); return; }
                    if (typeof cmd.nonce != 'string') { console.log('Invalid server nonce'); exit(100); return; }
                    if (typeof cmd.certs != 'object') { console.log('Invalid server certificates'); exit(100); return; }
                    settings.xxprofileScript = cmd.profileScript;
                    settings.xxrawpassword = cmd.rawpassword;

                    cmd.index = 0;
                    // If we are in CCM mode, deactivate.
                    if (mestate.controlMode == 1) {
                        amtMei.unprovision(1, function (status) {
                            if (status == 0) {
                                console.log('Intel AMT CCM deactivated, holding 10 seconds...');
                                // We are ready to go, perform ACM activation.
                                settings.xxTimer = setTimeout(function () { performAcmActivation(cmd, AcmActivationCompleted); }, 10000);
                            } else {
                                console.log('Intel AMT CCM deactivation error ' + status); exit(1); return;
                            }
                        });
                    } else {
                        // We are ready to go, perform ACM activation.
                        performAcmActivation(cmd, AcmActivationCompleted);
                    }
                    break;
                }
                case 'ccmactivate': {
                    // Server responded with CCM activation response
                    if (typeof cmd.password != 'string') { console.log('Invalid server password'); exit(100); return; }
                    settings.xxprofileScript = cmd.profileScript;
                    settings.xxrawpassword = cmd.rawpassword;

                    // If we are already in CCM mode, deactivate.
                    if (mestate.controlMode == 1) {
                        amtMei.unprovision(1, function (status) {
                            if (status == 0) {
                                console.log('Intel AMT CCM deactivated, holding 10 seconds...');
                                // We are ready to go, perform CCM activation.
                                settings.xxTimer = setTimeout(function () { osamtstack.IPS_HostBasedSetupService_Setup(2, cmd.password, null, null, null, null, performCcmActivation); }, 10000);
                            } else {
                                console.log('Intel AMT CCM deactivation error ' + status); exit(1); return;
                            }
                        });
                    } else {
                        // We are ready to go, perform CCM activation.
                        osamtstack.IPS_HostBasedSetupService_Setup(2, cmd.password, null, null, null, null, performCcmActivation);
                    }
                    break;
                }
                case 'amtdiscover': {
                    console.log('Done.');
                    exit(0);
                    break;
                }
                default: {
                    console.log('Invalid server response, command: ' + cmd.action); exit(100);
                    break;
                }
            }
        });

        var action = 'acmactivate';
        if (settings.action == 'amtccm') { action = 'ccmactivate'; }
        if (settings.action == 'amtdiscover') { action = 'amtdiscover'; }
        socket.write({ client: 'meshcmd', version: 1, action: action, fqdn: dnsSuffix, realm: digestRealm, nonce: fwNonce, uuid: uuid, profile: settings.profile, hashes: trustedHashes, tag: settings.tag, name: settings.name, ver: mestate.vers['AMT'], build: mestate.vers['Build Number'], sku: parseInt(mestate.vers['Sku']), modes: allowedModes, currentMode: mestate.controlMode, hostname: require('os').hostname() });
    });
    connection.end();
}

function performCcmActivation(stack, name, responses, status) {
    if (status != 200) {
        settings.xxsocket.write({ client: 'meshcmd', version: 1, action: 'ccmactivate-failed', uuid: mestate.uuid });
        console.log('Failed to activate, status ' + status);
    } else if (responses.Body.ReturnValue != 0) {
        settings.xxsocket.write({ client: 'meshcmd', version: 1, action: 'ccmactivate-failed', uuid: mestate.uuid });
        console.log('Intel AMT CCM activation failed: ' + responses.Body.ReturnValueStr);
    } else {
        settings.xxsocket.write({ client: 'meshcmd', version: 1, action: 'ccmactivate-success', uuid: mestate.uuid });
        if ((settings.xxprofileScript !== null) && (settings.xxrawpassword != null)) {
            console.log("Intel AMT CCM activation success, applying profile...");
            settings.scriptjson = settings.xxprofileScript;
            settings.password = settings.xxrawpassword; // This is only going to work if the server sends the raw password
            settings.username = 'admin';
            startMeScriptEx(function () { console.log('Intel AMT profile applied.'); socket.end(); exit(0); }, stack);
            return;
        } else {
            console.log('Intel AMT CCM activation success.');
            settings.xxsocket.end();
            exit(0);
            return;
        }
    }
    settings.xxsocket.end();
    exit(1);
}

function AcmActivationCompleted(result) {
    if (result == false) {
        console.log('Intel AMT ACM activation failed.');
        settings.xxsocket.write({ client: 'meshcmd', version: 1, action: 'acmactivate-failed', uuid: mestate.uuid });
        settings.xxsocket.end();
        exit(1);
    } else {
        if ((settings.xxprofileScript !== null) && (settings.xxrawpassword != null)) {
            console.log('Intel AMT ACM activation success, applying profile...');
            settings.scriptjson = settings.xxprofileScript;
            settings.password = settings.xxrawpassword; // This is only going to work if the server sends the raw password
            settings.username = 'admin';
            startMeScriptEx(function () { console.log('Intel AMT profile applied.'); settings.xxsocket.end(); exit(0); }, stack);
        } else {
            console.log('Intel AMT ACM activation success.');
            settings.xxsocket.write({ client: 'meshcmd', version: 1, action: 'acmactivate-success', uuid: mestate.uuid });
            settings.xxsocket.end();
            exit(0);
        }
    }
}

// Recursive function to inject the provisioning certificates into AMT in the proper order and completes ACM activation
function performAcmActivation(acmdata, func) {
    var leaf = (acmdata.index == 0), root = (acmdata.index == (acmdata.certs.length - 1));
    if ((acmdata.index < acmdata.certs.length) && (acmdata.certs[acmdata.index] != null)) {
        osamtstack.IPS_HostBasedSetupService_AddNextCertInChain(acmdata.certs[acmdata.index], leaf, root, function (stack, name, responses, status) {
            if (status !== 200) { console.log('AddNextCertInChain error, status=' + status); exit(1); return; }
            else if (responses['Body']['ReturnValue'] !== 0) { console.log('AddNextCertInChain error: ' + responses['Body']['ReturnValue']); exit(1); return; }
            else { acmdata.index++; performAcmActivation(acmdata, func); }
        });
    } else {
        //console.log(acmdata.password, acmdata.nonce, acmdata.signature);
        osamtstack.IPS_HostBasedSetupService_AdminSetup(2, acmdata.password, acmdata.nonce, 2, acmdata.signature,
            function (stack, name, responses, status) {
                if (status !== 200) { console.log('Error, AdminSetup status: ' + status); }
                else if (responses['Body']['ReturnValue'] != 0) { console.log('Error, AdminSetup return value: ' + responses['Body']['ReturnValue']); }
                func((status == 200) && (responses['Body']['ReturnValue'] == 0));
            }
        );
    }
}

//
// Get AMT UUID
//

// Called to get the UUID of Intel AMT, start by setting up MicroLMS if we are doing the operation on the local computer
function getAmtUuid() {
    if (settings.hostname == null) {
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getUuid(function (result) { if ((result == null) || (result.uuid == null)) { console.log('Failed.'); } else { console.log(result.uuid); } exit(1); });
    } else {
        if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) { settings.noconsole = true; startLms(getAmtUuidEx); return; } else { getAmtUuidEx(); }
    }
}

// Fetch the computer's UUID by fetching the CIM_ComputerSystemPackage WSMAN object.
function getAmtUuidEx() {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.Get("CIM_ComputerSystemPackage", function (obj, name, response, xstatus, tag) {
        if (xstatus == 200) { console.log("GUID: " + guidToStr(response.Body.PlatformGUID.toLowerCase())); } else { console.log("Intel AMT is not available or not activated."); } exit(1);
    });
}


//
// Run MESCRIPT
//

// Run a .mescript targeting local or remote Intel AMT.
function startMeScript() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) { settings.noconsole = true; startLms(startMeScriptEx); return; } else { startMeScriptEx(); }
}

function startMeScriptEx(callback, amtstack) {
    //console.log('Running script...');
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    if (!wsstack) { wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls); }
    if (!amtstack) { amtstack = new amt(wsstack); }
    //IntelAmtEntireStateProgress = 101;
    //amtstack.onProcessChanged = onWsmanProcessChanged;

    var scriptData = null;
    if (settings.script != null) {
        try { scriptData = fs.readFileSync(settings.script); } catch (e) { console.log('Unable to read script file (1): ' + settings.script + '.'); exit(1); return; }
    } else {
        scriptData = settings.scriptjson;
    }
    if (scriptData == null) { console.log('Unable to read script file (2): ' + settings.script + '.'); exit(1); return; }
    try { scriptData = JSON.parse(scriptData); } catch (e) { console.log('Unable to read script file (3): ' + settings.script + '.'); exit(1); return; }
    if (scriptData.mescript == null) { console.log('Unable to read script file (4): ' + settings.script + '.'); exit(1); return; }
    var scriptData = Buffer.from(scriptData.mescript, 'base64');

    var scriptModule = require('amt-script');
    var script = scriptModule.setup(scriptData, {})
    script.amtstack = amtstack;
    script.start();
    script.onCompleted = function () { if (callback) { callback(); } exit(1); }
}


//
// FETCH ALL INTEL AMT STATE
//

function saveEntireAmtState2() {
    console.log('Fetching all Intel AMT state, this may take a few minutes...');
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.onProcessChanged = onWsmanProcessChanged;
    //var AllWsman = "AMT_GeneralSystemDefenseCapabilities".split(',');
    var AllWsman = "AMT_8021xCredentialContext,AMT_8021XProfile,AMT_ActiveFilterStatistics,AMT_AgentPresenceCapabilities,AMT_AgentPresenceInterfacePolicy,AMT_AgentPresenceService,AMT_AgentPresenceWatchdog,AMT_AgentPresenceWatchdogAction,AMT_AlarmClockService,IPS_AlarmClockOccurrence,AMT_AssetTable,AMT_AssetTableService,AMT_AuditLog,AMT_AuditPolicyRule,AMT_AuthorizationService,AMT_BootCapabilities,AMT_BootSettingData,AMT_ComplexFilterEntryBase,AMT_CRL,AMT_CryptographicCapabilities,AMT_EACCredentialContext,AMT_EndpointAccessControlService,AMT_EnvironmentDetectionInterfacePolicy,AMT_EnvironmentDetectionSettingData,AMT_EthernetPortSettings,AMT_EventLogEntry,AMT_EventManagerService,AMT_EventSubscriber,AMT_FilterEntryBase,AMT_FilterInSystemDefensePolicy,AMT_GeneralSettings,AMT_GeneralSystemDefenseCapabilities,AMT_Hdr8021Filter,AMT_HeuristicPacketFilterInterfacePolicy,AMT_HeuristicPacketFilterSettings,AMT_HeuristicPacketFilterStatistics,AMT_InterfacePolicy,AMT_IPHeadersFilter,AMT_KerberosSettingData,AMT_ManagementPresenceRemoteSAP,AMT_MessageLog,AMT_MPSUsernamePassword,AMT_NetworkFilter,AMT_NetworkPortDefaultSystemDefensePolicy,AMT_NetworkPortSystemDefenseCapabilities,AMT_NetworkPortSystemDefensePolicy,AMT_PCIDevice,AMT_PETCapabilities,AMT_PETFilterForTarget,AMT_PETFilterSetting,AMT_ProvisioningCertificateHash,AMT_PublicKeyCertificate,AMT_PublicKeyManagementCapabilities,AMT_PublicKeyManagementService,AMT_PublicPrivateKeyPair,AMT_RedirectionService,AMT_RemoteAccessCapabilities,AMT_RemoteAccessCredentialContext,AMT_RemoteAccessPolicyAppliesToMPS,AMT_RemoteAccessPolicyRule,AMT_RemoteAccessService,AMT_SetupAndConfigurationService,AMT_SNMPEventSubscriber,AMT_StateTransitionCondition,AMT_SystemDefensePolicy,AMT_SystemDefensePolicyInService,AMT_SystemDefenseService,AMT_SystemPowerScheme,AMT_ThirdPartyDataStorageAdministrationService,AMT_ThirdPartyDataStorageService,AMT_TimeSynchronizationService,AMT_TLSCredentialContext,AMT_TLSProtocolEndpoint,AMT_TLSProtocolEndpointCollection,AMT_TLSSettingData,AMT_TrapTargetForService,AMT_UserInitiatedConnectionService,AMT_WebUIService,AMT_WiFiPortConfigurationService,CIM_AbstractIndicationSubscription,CIM_Account,CIM_AccountManagementCapabilities,CIM_AccountManagementService,CIM_AccountOnSystem,CIM_AdminDomain,CIM_AlertIndication,CIM_AssignedIdentity,CIM_AssociatedPowerManagementService,CIM_AuthenticationService,CIM_AuthorizationService,CIM_BIOSElement,CIM_BIOSFeature,CIM_BIOSFeatureBIOSElements,CIM_BootConfigSetting,CIM_BootService,CIM_BootSettingData,CIM_BootSourceSetting,CIM_Capabilities,CIM_Card,CIM_Chassis,CIM_Chip,CIM_Collection,CIM_Component,CIM_ComputerSystem,CIM_ComputerSystemPackage,CIM_ConcreteComponent,CIM_ConcreteDependency,CIM_Controller,CIM_CoolingDevice,CIM_Credential,CIM_CredentialContext,CIM_CredentialManagementService,CIM_Dependency,CIM_DeviceSAPImplementation,CIM_ElementCapabilities,CIM_ElementConformsToProfile,CIM_ElementLocation,CIM_ElementSettingData,CIM_ElementSoftwareIdentity,CIM_ElementStatisticalData,CIM_EnabledLogicalElement,CIM_EnabledLogicalElementCapabilities,CIM_EthernetPort,CIM_Fan,CIM_FilterCollection,CIM_FilterCollectionSubscription,CIM_HostedAccessPoint,CIM_HostedDependency,CIM_HostedService,CIM_Identity,CIM_IEEE8021xCapabilities,CIM_IEEE8021xSettings,CIM_Indication,CIM_IndicationService,CIM_InstalledSoftwareIdentity,CIM_KVMRedirectionSAP,CIM_LANEndpoint,CIM_ListenerDestination,CIM_ListenerDestinationWSManagement,CIM_Location,CIM_Log,CIM_LogEntry,CIM_LogicalDevice,CIM_LogicalElement,CIM_LogicalPort,CIM_LogicalPortCapabilities,CIM_LogManagesRecord,CIM_ManagedCredential,CIM_ManagedElement,CIM_ManagedSystemElement,CIM_MediaAccessDevice,CIM_MemberOfCollection,CIM_Memory,CIM_MessageLog,CIM_NetworkPort,CIM_NetworkPortCapabilities,CIM_NetworkPortConfigurationService,CIM_OrderedComponent,CIM_OwningCollectionElement,CIM_OwningJobElement,CIM_PCIController,CIM_PhysicalComponent,CIM_PhysicalElement,CIM_PhysicalElementLocation,CIM_PhysicalFrame,CIM_PhysicalMemory,CIM_PhysicalPackage,CIM_Policy,CIM_PolicyAction,CIM_PolicyCondition,CIM_PolicyInSystem,CIM_PolicyRule,CIM_PolicyRuleInSystem,CIM_PolicySet,CIM_PolicySetAppliesToElement,CIM_PolicySetInSystem,CIM_PowerManagementCapabilities,CIM_PowerManagementService,CIM_PowerSupply,CIM_Privilege,CIM_PrivilegeManagementCapabilities,CIM_PrivilegeManagementService,CIM_ProcessIndication,CIM_Processor,CIM_ProtocolEndpoint,CIM_ProvidesServiceToElement,CIM_Realizes,CIM_RecordForLog,CIM_RecordLog,CIM_RedirectionService,CIM_ReferencedProfile,CIM_RegisteredProfile,CIM_RemoteAccessAvailableToElement,CIM_RemoteIdentity,CIM_RemotePort,CIM_RemoteServiceAccessPoint,CIM_Role,CIM_RoleBasedAuthorizationService,CIM_RoleBasedManagementCapabilities,CIM_RoleLimitedToTarget,CIM_SAPAvailableForElement,CIM_SecurityService,CIM_Sensor,CIM_Service,CIM_ServiceAccessBySAP,CIM_ServiceAccessPoint,CIM_ServiceAffectsElement,CIM_ServiceAvailableToElement,CIM_ServiceSAPDependency,CIM_ServiceServiceDependency,CIM_SettingData,CIM_SharedCredential,CIM_SoftwareElement,CIM_SoftwareFeature,CIM_SoftwareFeatureSoftwareElements,CIM_SoftwareIdentity,CIM_StatisticalData,CIM_StorageExtent,CIM_System,CIM_SystemBIOS,CIM_SystemComponent,CIM_SystemDevice,CIM_SystemPackaging,CIM_UseOfLog,CIM_Watchdog,CIM_WiFiEndpoint,CIM_WiFiEndpointCapabilities,CIM_WiFiEndpointSettings,CIM_WiFiPort,CIM_WiFiPortCapabilities,IPS_AdminProvisioningRecord,IPS_ClientProvisioningRecord,IPS_HostBasedSetupService,IPS_HostIPSettings,IPS_IderSessionUsingPort,IPS_IPv6PortSettings,IPS_KVMRedirectionSettingData,IPS_KvmSessionUsingPort,IPS_ManualProvisioningRecord,IPS_OptInService,IPS_ProvisioningAuditRecord,IPS_ProvisioningRecordLog,IPS_RasSessionUsingPort,IPS_ScreenSettingData,IPS_SecIOService,IPS_SessionUsingPort,IPS_SolSessionUsingPort,IPS_TLSProvisioningRecord".split(',');
    IntelAmtEntireStateProgress = 101;
    IntelAmtEntireStateCalls = 3;
    IntelAmtEntireState = { 'localtime': Date(), 'utctime': new Date().toUTCString(), 'isotime': new Date().toISOString() };
    amtstack.BatchEnum(null, AllWsman, saveEntireAmtStateOk2, null, true);
    amtstack.GetAuditLog(saveEntireAmtStateOk3);
    amtstack.GetMessageLog(saveEntireAmtStateOk4);

}

// Save the entire Intel AMT state
function saveEntireAmtState() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true;
        startLms().then(saveEntireAmtState2);
    }
    else {
        saveEntireAmtState2();
    }
}

function onWsmanProcessChanged(a, b) { var x = Math.floor((a * 100) / b); if (x < IntelAmtEntireStateProgress) { IntelAmtEntireStateProgress = x; console.log((100 - x) + '%'); } }
function saveEntireAmtStateOk2(stack, name, responses, status) { if (status == 600) { console.log('ERROR: Unable to connect to Intel(R) AMT.'); exit(2); } IntelAmtEntireState['wsmanenums'] = responses; saveEntireAmtStateDone(); }
function saveEntireAmtStateOk3(stack, messages, status) { if (status == 600) { console.log('ERROR: Unable to connect to Intel(R) AMT.'); exit(2); } IntelAmtEntireState['auditlog'] = messages; saveEntireAmtStateDone(); }
function saveEntireAmtStateOk4(stack, messages, tag, status) { if (status == 600) { console.log('ERROR: Unable to connect to Intel(R) AMT.'); exit(2); } IntelAmtEntireState['eventlog'] = messages; saveEntireAmtStateDone(); }

// Called when the entire state of Intel AMT is fetched.
function saveEntireAmtStateDone() {
    if (--IntelAmtEntireStateCalls != 0) return;
    var out = fs.openSync(settings.output, 'w');
    fs.writeSync(out, Buffer.from(JSON.stringify(IntelAmtEntireState)));
    fs.closeSync(out);
    console.log('Done, results written to ' + settings.output + '.');
    exit(1);
}


//
// FETCH ALL INTEL AMT MEI STATE
//

// Get Intel AMT information using MEI
// TODO: If this call is called many time at once, it's going to cause issues.
var getAmtInfoFetching = null;
var getAmtInfoFetchingTimer = null;
function getAmtInfo(func, tag) {
    if (amtMei == null) { if (func != null) { func(null, tag); } return; }
    if (getAmtInfoFetching != null) { getAmtInfoFetching.push({ f: func, t: tag }); return; }
    getAmtInfoFetching = [{ f: func, t: tag }];
    amtMeiTmpState = { Flags: 0, TrustedHashes: [] }; // Flags: 1=EHBC, 2=CCM, 4=ACM
    getAmtInfoFetchingTimer = setTimeout(function () {
        // MEI failed to respond, break out and reset everthing.
        for (var i in getAmtInfoFetching) { if (getAmtInfoFetching[i].f != null) { getAmtInfoFetching[i].f(amtMeiTmpState, getAmtInfoFetching[i].t); } }
        getAmtInfoFetching = null;
        getAmtInfoFetchingTimer = null;
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    }, 3000);
    amtMei.getProtocolVersion(function (result) { if (result != null) { amtMeiTmpState.MeiVersion = result; } });
    amtMei.getVersion(function (val) {
        amtMeiTmpState.Versions = {};
        if (val != null) {
            for (var version in val.Versions) { amtMeiTmpState.Versions[val.Versions[version].Description] = val.Versions[version].Version; }
            amtMei.getProvisioningMode(function (result) { if (result != null) { amtMeiTmpState.ProvisioningMode = result.mode; } });
            amtMei.getProvisioningState(function (result) { if (result != null) { amtMeiTmpState.ProvisioningState = result.state; } });
            amtMei.getEHBCState(function (result) { if ((result != null) && (result.EHBC == true)) { amtMeiTmpState.Flags += 1; } });
            amtMei.getControlMode(function (result) { if (result != null) { if (result.controlMode == 1) { amtMeiTmpState.Flags += 2; } if (result.controlMode == 2) { amtMeiTmpState.Flags += 4; } } });
            //amtMei.getMACAddresses(function (result) { if (result != null) { amtMeiTmpState.mac = result; } });
            amtMei.getDnsSuffix(function (result) { if (result != null) { amtMeiTmpState.dns = result; } });
            amtMei.getHashHandles(function (handles) {
                exitOnCount = handles.length;
                for (var i = 0; i < handles.length; ++i) {
                    amtMei.getCertHashEntry(handles[i], function (result) {
                        amtMeiTmpState.TrustedHashes.push({ Active: result.isActive, Default: result.isDefault, HashAlgorithm: result.hashAlgorithm, Name: result.name, Hash: result.certificateHash });
                        if (--exitOnCount == 0) {
                            amtMeiTmpState.Notifications = lmsNotifications; amtMeiState = amtMeiTmpState;
                            for (var i in getAmtInfoFetching) { if (getAmtInfoFetching[i].f != null) { getAmtInfoFetching[i].f(amtMeiTmpState, getAmtInfoFetching[i].t); } }
                            getAmtInfoFetching = null;
                            clearTimeout(getAmtInfoFetchingTimer);
                            getAmtInfoFetchingTimer = null;
                        }
                    });
                }
            });
        } else {
            amtMeiState = amtMeiTmpState;
            amtMeiState.ProvisioningMode = -858993460;
            amtMeiState.TrustedHashes = {};
            amtMeiState.Notifications = lmsNotifications;
            //console.log('getAmtInfo3', JSON.stringify(amtMeiState));
            if (func != null) { func(amtMeiState, tag); }
        }
    });
}


//
// MicroLMS
//

var lmsControlSockets = {};
var lmsControlSocketsNextId = 1;
var lmsNotifications = [];
var amtLms = null;
var promise = require('promise');

function startLms(func, lmscommander, tag) {
    var ret = new promise(function (res, rej) { this._res = res; this._rej = rej; });
    var lme_heci = null
    try { lme_heci = require('amt-lme'); } catch (ex) { }
    if (lme_heci == null) { if (func != null) { func(0, tag); } this.promise._res(); return; }

    //var amtLms = null;
    var http = require('http');

    console.log('Setting up MEI...');
    try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
    amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    //console.log("PTHI Connected.");

    console.log('Setting up LME...');
    amtLms = new lme_heci({ debug: settings.lmsdebug });
    amtLms.promise = ret;
    amtLms.on('error', function (e) {
        //console.log('LME connection failed', e);
        if (lmscommander === true) { //settings.noconsole !== true) {
            startMeshCommanderLms();
            //console.log("LMS started, MeshCommander on HTTP/16994.");
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 2, tag); }, 100);
        } else {
            //console.log('LME connection failed: ' + JSON.stringify(e));
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 0, tag); }, 100);
        }
        this.promise._res();
    });
    amtLms.on('notify', function (data, options, str, code) {
        if (code == 'iAMT0052-3') {
            kvmGetData();
        } else if (str != null) {
            var notify = { date: Date.now(), str: str, code: code };
            lmsNotifications.push(notify);
            while (lmsNotifications.length > 100) { lmsNotifications.shift(); }
            var notifyBuf = Buffer.concat([Buffer.from('0900', 'hex'), Buffer.from(JSON.stringify(notify))]) // Add a notification
            for (var i in lmsControlSockets) { lmsControlSockets[i].write(notifyBuf); }
        }
    });
    //console.log('LME Connecting...');
    amtLms.on('bind', function (mapping) {
        if (mapping[16992]) { this.removeAllListeners('bind'); } else { return; }
        //console.log('LMS Bounded');
        amtLms.connected = true;
        this.promise._res();

        //console.log("LME Connected.");
        if (settings.noconsole !== true) {
            startMeshCommanderLms();
            //console.log("LMS started, MeshCommander on HTTP/16994.");
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 2, tag); }, 100);
            //console.logReferenceCount(tempTimer);
        } else {
            //console.log("LMS started.");
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 1, tag); }, 100);
            //console.logReferenceCount(tempTimer);
        }

    });
    return (ret);
}

function startMeshCommanderLms() {

    amtLms.meshCommander = http.createServer();
    amtLms.meshCommander.listen(16994);
    amtLms.meshCommander.on('upgrade', function (req, socket, head) {
        //console.log("WebSocket for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/lms.ashx': // MeshCommander control channel (PTHI)
                socket.ws = socket.upgradeWebSocket();
                socket.ws.on('data', processLmsControlData);
                socket.ws.on('end', function () { if (lmsControlSockets[this.id]) { delete lmsControlSockets[this.id]; /*console.log('removeControl', JSON.stringify(lmsControlSockets));*/ } });
                var id = lmsControlSocketsNextId++;
                lmsControlSockets[id] = socket.ws;
                socket.ws.id = id;
                //socket.ws.write(Buffer.concat([Buffer.from('0900', 'hex'), Buffer.from(JSON.stringify(lmsNotifications))])); // Send out full list of notifications
                //console.log('addControl', JSON.stringify(lmsControlSockets));
                break;
            case '/webrelay.ashx': // MeshCommander data channel (LME)
                socket.ws = socket.upgradeWebSocket();
                if (amtLms.connected == true) {
                    // Route traffic directly into MicroLMS
                    amtLms.bindDuplexStream(socket.ws, 'IPv4', 16992);
                } else {
                    // Route traffic to real LMS service
                    var net = require('net');
                    socket.relay = net.connect({ host: '127.0.0.1', port: 16992 })
                    socket.relay.on('connect', function () {
                        socket.ws.on('data', function (data) { socket.relay.write(data); });
                        socket.ws.on('end', function () { socket.relay.end(); });
                    });
                    socket.relay.on('data', function (data) { socket.ws.write(data); });
                    socket.relay.on('close', function () { socket.ws.end(); });
                }
                break;
            default:
                socket.end();
                break;
        }
    });
    amtLms.meshCommander.on('request', function (req, rsp) {
        //console.log("WebRequest for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/': // Serve MeshCommander Web Application for LMS
                var lmscommander = null;
                try { lmscommander = fs.readFileSync('lmscommander.htm'); } catch (e) { }
                if (lmscommander != null) {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Transfer-Encoding': 'chunked' });
                    rsp.end(lmscommander);
                } else {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Content-Encoding': 'gzip', 'Transfer-Encoding': 'chunked', ETag: _IntelAmtWebApp_etag });
                    rsp.end(Buffer.from(_IntelAmtWebApp, "base64"));
                }
                break;
            default: // Unknown request
                rsp.statusCode = 404;
                rsp.statusMessage = "Not Found";
                rsp.end();
                break;
        }

    });
}

function setupMeiOsAdmin(func, state, tag) {
    if (amtMei == null) {
        if (func) { func(state, tag); }
    } else {
        amtMei.getLocalSystemAccount(function (x) {
            var transport = require('amt-wsman-duk');
            var wsman = require('amt-wsman');
            var amt = require('amt');
            oswsstack = new wsman(transport, '127.0.0.1', 16992, x.user, x.pass, false);
            osamtstack = new amt(oswsstack);
            if (func) { func(state, tag); }

            //var AllWsman = "CIM_SoftwareIdentity,IPS_SecIOService,IPS_ScreenSettingData,IPS_ProvisioningRecordLog,IPS_HostBasedSetupService,IPS_HostIPSettings,IPS_IPv6PortSettings".split(',');
            //osamtstack.BatchEnum(null, AllWsman, startLmsWsmanResponse, null, true);
            //*************************************

            // Setup KVM data channel if this is Intel AMT 12 or above
            amtMei.getVersion(function (x) {
                var amtver = null;
                try { for (var i in x.Versions) { if (x.Versions[i].Description == 'AMT') amtver = parseInt(x.Versions[i].Version.split('.')[0]); } } catch (e) { }
                if ((amtver != null) && (amtver >= 12)) {
                    kvmGetData('skip'); // Clear any previous data, this is a dummy read to about handling old data.
                    tempTimer = setInterval(function () { kvmGetData(); }, 2000); // Start polling for KVM data.
                    kvmSetData(JSON.stringify({ action: 'restart', ver: 1 })); // Send a restart command to advise the console if present that MicroLMS just started.
                }
            });
        });
    }
}

function kvmGetData(tag) {
    osamtstack.IPS_KVMRedirectionSettingData_DataChannelRead(kvmDataGetResponse, tag);
}

function kvmDataGetResponse(stack, name, response, status, tag) {
    if ((tag != 'skip') && (status == 200) && (response.Body.ReturnValue == 0)) {
        var val = null;
        try { val = Buffer.from(response.Body.DataMessage, 'base64').toString(); } catch (e) { return }
        if (val != null) { kvmProcessData(response.Body.RealmsBitmap, response.Body.MessageId, val); }
    }
}

var webRtcDesktop = null;
function kvmProcessData(realms, messageId, val) {
    var data = null;
    try { data = JSON.parse(val) } catch (e) { }
    if ((data != null) && (data.action)) {
        if (data.action == 'present') { kvmSetData(JSON.stringify({ action: 'present', ver: 1, platform: process.platform })); }
        if (data.action == 'offer') {
            webRtcDesktop = {};
            var rtc = require('ILibWebRTC');
            webRtcDesktop.webrtc = rtc.createConnection();
            webRtcDesktop.webrtc.on('connected', function () { });
            webRtcDesktop.webrtc.on('disconnected', function () { webRtcCleanUp(); });
            webRtcDesktop.webrtc.on('dataChannel', function (rtcchannel) {
                webRtcDesktop.rtcchannel = rtcchannel;
                var kvmmodule = require('meshDesktop');
                webRtcDesktop.kvm = kvmmodule.getRemoteDesktopStream();
                webRtcDesktop.kvm.pipe(webRtcDesktop.rtcchannel, { dataTypeSkip: 1, end: false });
                webRtcDesktop.rtcchannel.on('end', function () { webRtcCleanUp(); });
                webRtcDesktop.rtcchannel.on('data', function (x) { kvmCtrlData(this, x); });
                webRtcDesktop.rtcchannel.pipe(webRtcDesktop.kvm, { dataTypeSkip: 1, end: false });
                //webRtcDesktop.kvm.on('end', function () { console.log('WebRTC DataChannel closed2'); webRtcCleanUp(); });
                //webRtcDesktop.rtcchannel.on('data', function (data) { console.log('WebRTC data: ' + data); });
            });
            kvmSetData(JSON.stringify({ action: 'answer', ver: 1, sdp: webRtcDesktop.webrtc.setOffer(data.sdp) }));
        }
    }
}

// Polyfill path.join
var path = {
    join: function () {
        var x = [];
        for (var i in arguments) {
            var w = arguments[i];
            if (w != null) {
                while (w.endsWith('/') || w.endsWith('\\')) { w = w.substring(0, w.length - 1); }
                if (i != 0) {
                    while (w.startsWith('/') || w.startsWith('\\')) { w = w.substring(1); }
                }
                x.push(w);
            }
        }
        if (x.length == 0) return '/';
        return x.join('/');
    }
};

// Get a formated response for a given directory path
function getDirectoryInfo(reqpath) {
    var response = { path: reqpath, dir: [] };
    if (((reqpath == undefined) || (reqpath == '')) && (process.platform == 'win32')) {
        // List all the drives in the root, or the root itself
        var results = null;
        try { results = fs.readDrivesSync(); } catch (e) { } // TODO: Anyway to get drive total size and free space? Could draw a progress bar.
        //console.log('a', objToString(results, 0, ' '));
        if (results != null) {
            for (var i = 0; i < results.length; ++i) {
                var drive = { n: results[i].name, t: 1 };
                if (results[i].type == 'REMOVABLE') { drive.dt = 'removable'; } // TODO: See if this is USB/CDROM or something else, we can draw icons.
                response.dir.push(drive);
            }
        }
    } else {
        // List all the files and folders in this path
        if (reqpath == '') { reqpath = '/'; }
        var xpath = path.join(reqpath, '*');
        var results = null;

        try { results = fs.readdirSync(xpath); } catch (e) { }
        if (results != null) {
            for (var i = 0; i < results.length; ++i) {
                if ((results[i] != '.') && (results[i] != '..')) {
                    var stat = null, p = path.join(reqpath, results[i]);
                    try { stat = fs.statSync(p); } catch (e) { } // TODO: Get file size/date
                    if ((stat != null) && (stat != undefined)) {
                        if (stat.isDirectory() == true) {
                            response.dir.push({ n: results[i], t: 2, d: stat.mtime });
                        } else {
                            response.dir.push({ n: results[i], t: 3, s: stat.size, d: stat.mtime });
                        }
                    }
                }
            }
        }
    }
    return response;
}

// Process KVM control channel data
function kvmCtrlData(channel, cmd) {
    if (cmd.length > 0 && cmd.charCodeAt(0) != 123) {
        // This is upload data
        if (this.fileupload != null) {
            cmd = Buffer.from(cmd, 'base64');
            var header = cmd.readUInt32BE(0);
            if ((header == 0x01000000) || (header == 0x01000001)) {
                fs.writeSync(this.fileupload.fp, cmd.slice(4));
                channel.write({ action: 'upload', sub: 'ack', reqid: this.fileupload.reqid });
                if (header == 0x01000001) { fs.closeSync(this.fileupload.fp); this.fileupload = null; } // Close the file
            }
        }
        return;
    }
    //console.log('KVM Ctrl Data', cmd);

    try { cmd = JSON.parse(cmd); } catch (ex) { console.error('Invalid JSON: ' + cmd); return; }
    if ((cmd.path != null) && (process.platform != 'win32') && (cmd.path[0] != '/')) { cmd.path = '/' + cmd.path; } // Add '/' to paths on non-windows
    switch (cmd.action) {
        case 'ping': {
            // This is a keep alive
            channel.write({ action: 'pong' });
            break;
        }
        case 'ls': {
            /*
            // Close the watcher if required
            var samepath = ((this.httprequest.watcher != undefined) && (cmd.path == this.httprequest.watcher.path));
            if ((this.httprequest.watcher != undefined) && (samepath == false)) {
                //console.log('Closing watcher: ' + this.httprequest.watcher.path);
                //this.httprequest.watcher.close(); // TODO: This line causes the agent to crash!!!!
                delete this.httprequest.watcher;
            }
            */

            // Send the folder content to the browser
            var response = getDirectoryInfo(cmd.path);
            if (cmd.reqid != undefined) { response.reqid = cmd.reqid; }
            channel.write(response);

            /*
            // Start the directory watcher
            if ((cmd.path != '') && (samepath == false)) {
                var watcher = fs.watch(cmd.path, onFileWatcher);
                watcher.tunnel = this.httprequest;
                watcher.path = cmd.path;
                this.httprequest.watcher = watcher;
                //console.log('Starting watcher: ' + this.httprequest.watcher.path);
            }
            */
            break;
        }
        case 'mkdir': {
            // Create a new empty folder
            fs.mkdirSync(cmd.path);
            break;
        }
        case 'rm': {
            // Remove many files or folders
            for (var i in cmd.delfiles) {
                var fullpath = path.join(cmd.path, cmd.delfiles[i]);
                try { fs.unlinkSync(fullpath); } catch (e) { console.log(e); }
            }
            break;
        }
        case 'rename': {
            // Rename a file or folder
            var oldfullpath = path.join(cmd.path, cmd.oldname);
            var newfullpath = path.join(cmd.path, cmd.newname);
            try { fs.renameSync(oldfullpath, newfullpath); } catch (e) { console.log(e); }
            break;
        }
        case 'download': {
            // Download a file, to browser
            var sendNextBlock = 0;
            if (cmd.sub == 'start') { // Setup the download
                if (this.filedownload != null) { channel.write({ action: 'download', sub: 'cancel', id: this.filedownload.id }); delete this.filedownload; }
                this.filedownload = { id: cmd.id, path: cmd.path, ptr: 0 }
                try { this.filedownload.f = fs.openSync(this.filedownload.path, 'rbN'); } catch (e) { channel.write({ action: 'download', sub: 'cancel', id: this.filedownload.id }); delete this.filedownload; }
                if (this.filedownload) { channel.write({ action: 'download', sub: 'start', id: cmd.id }); }
            } else if ((this.filedownload != null) && (cmd.id == this.filedownload.id)) { // Download commands
                if (cmd.sub == 'startack') { sendNextBlock = 8; } else if (cmd.sub == 'stop') { delete this.filedownload; } else if (cmd.sub == 'ack') { sendNextBlock = 1; }
            }
            // Send the next download block(s)
            while (sendNextBlock > 0) {
                sendNextBlock--;
                var buf = Buffer.alloc(4096);
                var len = fs.readSync(this.filedownload.f, buf, 4, 4092, null);
                this.filedownload.ptr += len;
                if (len < 4092) { buf.writeInt32BE(0x01000001, 0); fs.closeSync(this.filedownload.f); delete this.filedownload; sendNextBlock = 0; } else { buf.writeInt32BE(0x01000000, 0); }
                channel.write(buf.slice(0, len + 4).toString('base64')); // Write as Base64
            }
            break;
        }
        case 'upload': {
            // Upload a file, from browser
            if (cmd.sub == 'start') { // Start the upload
                if (this.fileupload != null) { fs.closeSync(this.fileupload.fp); }
                if (!cmd.path || !cmd.name) break;
                this.fileupload = { reqid: cmd.reqid };
                var filepath = path.join(cmd.path, cmd.name);
                try { this.fileupload.fp = fs.openSync(filepath, 'wbN'); } catch (e) { }
                if (this.fileupload.fp) { channel.write({ action: 'upload', sub: 'start', reqid: this.fileupload.reqid }); } else { this.fileupload = null; channel.write({ action: 'upload', sub: 'error', reqid: this.fileupload.reqid }); }
            }
            else if (cmd.sub == 'cancel') { // Stop the upload
                if (this.fileupload != null) { fs.closeSync(this.fileupload.fp); this.fileupload = null; }
            }
            break;
        }
        case 'copy': {
            // Copy a bunch of files from scpath to dspath
            for (var i in cmd.names) {
                var sc = path.join(cmd.scpath, cmd.names[i]), ds = path.join(cmd.dspath, cmd.names[i]);
                if (sc != ds) { try { fs.copyFileSync(sc, ds); } catch (e) { } }
            }
            break;
        }
        case 'move': {
            // Move a bunch of files from scpath to dspath
            for (var i in cmd.names) {
                var sc = path.join(cmd.scpath, cmd.names[i]), ds = path.join(cmd.dspath, cmd.names[i]);
                if (sc != ds) { try { fs.copyFileSync(sc, ds); fs.unlinkSync(sc); } catch (e) { } }
            }
            break;
        }
        default:
            // Unknown action, ignore it.
            break;
    }
}

function webRtcCleanUp() {
    if (webRtcDesktop == null) return;
    if (webRtcDesktop.rtcchannel) {
        try { webRtcDesktop.rtcchannel.close(); } catch (e) { }
        try { webRtcDesktop.rtcchannel.removeAllListeners('data'); } catch (e) { }
        try { webRtcDesktop.rtcchannel.removeAllListeners('end'); } catch (e) { }
        delete webRtcDesktop.rtcchannel;
    }
    if (webRtcDesktop.webrtc) {
        try { webRtcDesktop.webrtc.close(); } catch (e) { }
        try { webRtcDesktop.webrtc.removeAllListeners('connected'); } catch (e) { }
        try { webRtcDesktop.webrtc.removeAllListeners('disconnected'); } catch (e) { }
        try { webRtcDesktop.webrtc.removeAllListeners('dataChannel'); } catch (e) { }
        delete webRtcDesktop.webrtc;
    }
    if (webRtcDesktop.kvm) {
        try { webRtcDesktop.kvm.end(); } catch (e) { }
        delete webRtcDesktop.kvm;
    }
    webRtcDesktop = null;
}

function kvmSetData(x) {
    osamtstack.IPS_KVMRedirectionSettingData_DataChannelWrite(Buffer.from(x).toString('base64'), function () { });
}

function startLmsWsmanResponse(stack, name, responses, status) {
    if (status == 600) { console.log("ERROR: Unable to connect to Intel(R) AMT."); }
    else if (status != 200) { console.log("ERROR: Unable to get object from Intel(R) AMT, status = " + status + "."); }
    else {
        //console.log(JSON.stringify(responses), status);
        var amtlogicalelements = responses['CIM_SoftwareIdentity'].responses;
        if (amtlogicalelements.length > 0) {
            var v = getInstance(amtlogicalelements, 'AMT')['VersionString'];
            amtversion = parseInt(v.split('.')[0]);
            amtversionmin = parseInt(v.split('.')[1]);
            //console.log(amtversion, amtversionmin);
        }
    }
}


// Process commands in the LMS control channel
// Command 9 is add a notification.
function processLmsControlData(data) {
    if (data.length < 2) return;
    var cmdid = data.readUInt16LE(0);
    switch (cmdid) {
        case 1: // Request basic Intel AMT information (CMD = 1)
            { getAmtInfo(function (meinfo, socket) { meinfo.LoginMode = 2; socket.write(Buffer.concat([Buffer.from('0100', 'hex'), Buffer.from(JSON.stringify(meinfo))])); }, this); break; }
        case 2: // Intel AMT MEI Unprovision (CMD = 2)
            { if (data.length < 6) break; amtMei.unprovision(data.readUInt32LE(2), function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(2, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 3: // Intel AMT MEI GetLocalSystemAccount (CMD = 3)
            { amtMei.getLocalSystemAccount(function (account, socket) { socket.write(Buffer.concat([Buffer.from('030000000000', 'hex'), account.raw])); }, this); break; }
        case 4: // Instruct Intel AMT to start remote configuration (CMD = 4)
            { amtMei.startConfiguration(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 5: // Instruct Intel AMT to stop remote configuration (CMD = 5)
            { amtMei.stopConfiguration(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 6: // Instruct Intel AMT connect CIRA (CMD = 6)
            { amtMei.openUserInitiatedConnection(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 7: // Instruct Intel AMT disconnect CIRA (CMD = 7)
            { amtMei.closeUserInitiatedConnection(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 8: // Get Intel AMT CIRA State (CMD = 8)
            { amtMei.getRemoteAccessConnectionStatus(function (state, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(8, 0); data.writeUInt32LE(state.status, 2); socket.write(Buffer.concat([data, state.raw])); }, this); break; }
        default:
            // Unknown action, ignore it.
            break;
    }
}


//
// MeshCentral TCP port router
//

function startRouter() {
    // Start by requesting a login token, this is needed because of 2FA and check that we have correct credentials from the start
    var options;
    try {
        var url = settings.serverurl.split('meshrelay.ashx').join('control.ashx');
        if (settings.authcookie != null) {
            url += '?auth=' + settings.authcookie;
        } else if (settings.username != null && settings.password != null) {
            url += '?user=' + settings.username + '&pass=' + settings.password;
        }
        if (settings.emailtoken) { url += '&token=**email**'; } else if (settings.token != null) { url += '&token=' + settings.token; }
        options = http.parseUri(url);
    } catch (e) { console.log("Unable to parse \"serverUrl\"."); process.exit(1); return; }
    options.checkServerIdentity = onVerifyServer;
    options.rejectUnauthorized = false;
    settings.websocket = http.request(options);
    settings.websocket.upgrade = OnServerWebSocket;
    settings.websocket.on('error', function (e) { console.log("ERROR: " + JSON.stringify(e)); });
    settings.websocket.end();
}

function OnServerWebSocket(msg, s, head) {
    settings.webchannel = s;
    s.on('data', function (msg) {
        var command = JSON.parse(msg);
        switch (command.action) {
            case 'close': {
                if (command.cause == 'noauth') {
                    if (command.msg == 'tokenrequired') {
                        if (command.email2fasent === true) {
                            console.log("Login token email sent.");
                        } else if (command.email2fa === true) {
                            console.log("Login token required, use --token [token], or --emailtoken get a token.");
                        } else {
                            console.log("Login token required, use --token [token].");
                        }
                    } else { console.log("Invalid username or password."); }
                } else { console.log("Server disconnected: " + command.msg); }
                process.exit(1);
                return;
            }
            case 'serverinfo': {
                s.write("{\"action\":\"authcookie\"}"); // Ask for our first authentication cookie
                break;
            }
            case 'authcookie': {
                if (settings.acookie == null) {
                    settings.acookie = command.cookie;
                    settings.rcookie = command.rcookie;
                    settings.renewCookieTimer = setInterval(function () { settings.webchannel.write("{\"action\":\"authcookie\"}"); }, 600000); // Ask for new cookie every 10 minutes
                    startRouterEx();
                } else {
                    settings.acookie = command.cookie;
                    settings.rcookie = command.rcookie;
                }
                break;
            }
        }
    });
    s.on('error', function () { console.log("Server connection error."); process.exit(1); return; });
    s.on('close', function () { console.log("Server closed the connection."); process.exit(1); return; });
}

function startRouterEx() {
    tcpserver = net.createServer(OnTcpClientConnected);
    tcpserver.on('error', function (e) { console.log("ERROR: " + JSON.stringify(e)); exit(0); return; });
    try {
        tcpserver.listen(settings.localport, function () {
            // We started listening.
            if (settings.remotetarget == null) {
                console.log('Redirecting local port ' + settings.localport + ' to remote port ' + settings.remoteport + '.');
            } else {
                console.log('Redirecting local port ' + settings.localport + ' to ' + settings.remotetarget + ':' + settings.remoteport + '.');
            }
            console.log("Press ctrl-c to exit.");

            // If settings has a "cmd", run it now.
            //process.exec("notepad.exe");
        });
    } catch (ex) { console.log("Unable to bind to local TCP port " + settings.localport + "."); exit(1); return; }
}

// Called when a TCP connect is received on the local port. Launch a tunnel.
function OnTcpClientConnected(c) {
    try {
        // 'connection' listener
        debug(1, "Client connected");
        c.on('end', function () { disconnectTunnel(this, this.websocket, "Client closed"); });
        c.pause();
        var options;
        try {
            options = http.parseUri(settings.serverurl + '?auth=' + settings.acookie + '&nodeid=' + settings.remotenodeid + '&tcpport=' + settings.remoteport + (settings.remotetarget == null ? '' : '&tcpaddr=' + settings.remotetarget));
        } catch (e) { console.log("Unable to parse \"serverUrl\"."); process.exit(1); return; }
        options.checkServerIdentity = onVerifyServer;
        options.rejectUnauthorized = false;
        c.websocket = http.request(options);
        c.websocket.tcp = c;
        c.websocket.tunneling = false;
        c.websocket.upgrade = OnWebSocket;
        c.websocket.on('error', function (e) { console.log("ERROR: " + JSON.stringify(e)); });
        c.websocket.end();
    } catch (e) { debug(2, e); }
}

// Disconnect both TCP & WebSocket connections and display a message.
function disconnectTunnel(tcp, ws, msg) {
    if (ws != null) { try { ws.end(); } catch (e) { debug(2, e); } }
    if (tcp != null) { try { tcp.end(); } catch (e) { debug(2, e); } }
    debug(1, "Tunnel disconnected: " + msg);
}

// Called when the web socket gets connected
function OnWebSocket(msg, s, head) {
    debug(1, "Websocket connected");
    s.on('data', function (msg) {
        if (this.parent.tunneling == false) {
            msg = msg.toString();
            if ((msg == 'c') || (msg == 'cr')) {
                this.parent.tunneling = true; this.pipe(this.parent.tcp); this.parent.tcp.pipe(this); debug(1, "Tunnel active");
            } else if ((msg.length > 6) && (msg.substring(0, 6) == 'error:')) {
                console.log(msg.substring(6));
                disconnectTunnel(this.tcp, this, msg.substring(6));
            }
        }
    });
    s.on('error', function () { disconnectTunnel(this.tcp, this, 'Websocket error'); });
    s.on('close', function () { disconnectTunnel(this.tcp, this, 'Websocket closed'); });
    s.parent = this;
}

// Try to discover the location of the mesh server
function discoverMeshServer() { console.log("Looking for server..."); discoveryInterval = setInterval(discoverMeshServerOnce, 5000); discoverMeshServerOnce(); }

// Try to discover the location of the mesh server only once
function discoverMeshServerOnce() {
    var interfaces = os.networkInterfaces();
    for (var adapter in interfaces) {
        if (interfaces.hasOwnProperty(adapter)) {
            for (var i = 0; i < interfaces[adapter].length; ++i) {
                var addr = interfaces[adapter][i];
                multicastSockets[i] = dgram.createSocket({ type: (addr.family == 'IPv4' ? 'udp4' : 'udp6') });
                multicastSockets[i].bind({ address: addr.address, exclusive: false });
                if (addr.family == 'IPv4') {
                    try {
                        multicastSockets[i].addMembership(membershipIPv4);
                        //multicastSockets[i].setMulticastLoopback(true);
                        multicastSockets[i].once('message', OnMulticastMessage);
                        multicastSockets[i].send(settings.serverid, 16989, membershipIPv4);
                    } catch (e) { }
                }
            }
        }
    }
}

// Called when a multicast packet is received
function OnMulticastMessage(msg, rinfo) {
    var m = msg.toString().split('|');
    if ((m.length == 3) && (m[0] == 'MeshCentral2') && (m[1] == settings.serverid)) {
        settings.serverurl = m[2].replace('%s', rinfo.address).replace('/agent.ashx', '/meshrelay.ashx');
        console.log("Found server at " + settings.serverurl + ".");
        if (discoveryInterval != null) { clearInterval(discoveryInterval); discoveryInterval = null; }
        startRouter();
    }
}


//
// PUSH MESHCOMMANDER INTO FIRMWARE
//

function nextStepStorageUpload() {
    debug(3, "nextStepStorageUpload");
    getAmtStorage(function (statusCode, data) {
        if (statusCode == 200) {
            debug(2, "getAmtStorage: " + JSON.stringify(data, null, 2));
            if ((data['content'] != null) && (data['content']['index.htm'] != null)) { nextStepStorageUpload3('index.htm'); }
            else if ((data['content'] != null) && (data['content']['logon.htm'] != null)) { nextStepStorageUpload3('logon.htm'); }
            else if ((data['content'] != null) && (data['content']['logon.htm'] != null)) { nextStepStorageUpload3('logon.htm'); }
            else { nextStepStorageUpload2('index.htm', null); }
        } else {
            console.log("Unable to read storage state.");
            exit();
            return;
        }
    });
}

function nextStepStorageUpload2(uploadName, linkName) {
    debug(3, "nextStepStorageUpload2");
    if (settings.webapp == null) { console.log("Done."); exit(); return; } else {
        console.log("Uploading MeshCommander...");
        pushToStorage(uploadName, linkName, Buffer.from(settings.webapp, 'base64'), function (statusCode) {
            if (statusCode == 500) { console.log("Error, check that computer is powered on."); exit(); return; }
            if (statusCode != 200) {
                if (uploadName == 'index.htm') {
                    nextStepStorageUpload2('mesh/commander/console', 'MeshCommander');
                } else {
                    console.log("Unable to upload MeshCommander, status = " + statusCode + "."); exit(); return;
                }
            } else {
                console.log("Verifying MeshCommander...");
                verifyStorage(uploadName, Buffer.from(settings.webapp, 'base64'), function (verified) {
                    if (verified == true) { console.log("Done."); } else { console.log("MeshCommander verification failed."); }
                    exit(); return;
                });
            }
        });
    }
}

function nextStepStorageUpload3(deleteName) {
    console.log("Deleting " + deleteName + " from storage...");
    deleteStorage(deleteName, function (statusCode) {
        if (statusCode == 500) { console.log("Error, check that computer is powered on."); exit(); return; }
        if (statusCode == 200) { nextStepStorageUpload(); } else { console.log("Unable to delete " + deleteName + "."); exit(); return; }
    });
}

// Fetch the Intel AMT storage document
function getAmtStorage(func, noretry) {
    var req = digest.request({ protocol: settings.protocol, method: 'GET', host: settings.hostname, path: '/amt-storage/', port: settings.localport },
        function (response) {
            if (response.statusCode != 200) { console.log("Unable to connect to Intel(R) AMT."); func(response.statusCode, null); }
            response.on('data', function (chunk) { if (response.acc == null) { response.acc = chunk; } else { response.acc += chunk; } });
            response.on('end', function () {
                var data = response.acc.toString(), len, data2, amtstorage = null;
                data = data.split('\t').join('').split('\r').join('').split('\n').join('');
                try {
                    do { len = data.length; data2 = data; data = data2.replace('": ', '":'); } while (data != data2); // Remove all zero's, this is needed because firmware sometimes returns garbage we must fix.
                    do { len = data.length; data2 = data; data = data2.replace('\x00', ''); } while (data != data2); // Remove all zero's, this is needed because firmware sometimes returns garbage we must fix.
                    do { len = data.length; data2 = data; data = data2.replace('\x22\x01\x22', '\x22\x22'); } while (data != data2); // "\x01", this is needed because firmware sometimes returns garbage we must fix.
                    var xopen = data.split("{").length, xclose = data.split("}").length, xadd = '';
                    while (xopen > xclose) { data += '}'; xclose++; } // Close any missing close brackets
                    amtstorage = JSON.parse(data);
                } catch (e) { console.log("Error: Unable to parse Intel AMT response: " + data, e); func(null); }
                if (func != null) { func(response.statusCode, amtstorage); }
            });
        });
    req.on('error', function (e) { console.log("Error occured: " + JSON.stringify(e)); if (noretry == true) { if (func != null) { func(null); } } else { getAmtStorage(func, true); } });
    req.end();
}

// Fetch the Intel AMT storage document
function pushToStorage(name, linkname, data, func, ptr) {
    if (ptr == null) { ptr = 0; }
    var req = digest.request({ protocol: settings.protocol, method: 'PUT', host: settings.hostname, path: ('/amt-storage/' + name + ((ptr != 0) ? '?append=' : '')), port: settings.localport });
    req.on('error', function (e) { console.log("Error occured: " + JSON.stringify(e)); if (func != null) { func(null); } });
    req.on('response', function (response) {
        debug(1, 'Chunk Done', data.length, ptr);
        if ((response.statusCode == 200) && (ptr < data.length)) { pushToStorage(name, linkname, data, func, ptr); } else { if (func != null) { func(response.statusCode); } }
    });
    var header = (ptr > 0) ? '<metadata></metadata>' : '<metadata><headers><h>Content-Encoding:gzip</h><h>Content-Type:text/html</h></headers>' + ((linkname != null) ? ('<link>' + linkname + '</link>') : '') + '</metadata>';
    var blocklen = ((data.length - ptr) > (7000 - header.length)) ? (7000 - header.length) : (data.length - ptr);
    req.write(Buffer.concat([new Buffer(header), data.slice(ptr, ptr + blocklen)]));
    ptr += blocklen;
    req.end();
}

// Fetch the Intel AMT storage document
function verifyStorage(name, data, func) {
    var req = digest.request({ protocol: settings.protocol, method: 'GET', host: settings.hostname, path: ('/amt-storage/' + name), port: settings.localport });
    req.on('error', function (e) { console.log("Verify error occured: " + JSON.stringify(e)); if (func != null) { func(null); } });
    req.on('response', function (response) {
        response.ptr = 0;
        response.ok = true;
        response.on('data', function (data2) { if (data2.toString('hex') != data.slice(response.ptr, response.ptr + data2.length).toString('hex')) { response.ok = false; console.log('Verifiy failed (' + response.ptr + ', ' + data2.length + ').'); } response.ptr += data2.length; });
        response.on('end', function () { if (func != null) { func(response.ok); } });
    });
    req.end();
}

// Fetch the Intel AMT storage document
function deleteStorage(name, func, noretry) {
    var req = digest.request({ protocol: settings.protocol, method: 'DELETE', host: settings.hostname, path: '/amt-storage/' + name, port: settings.localport });
    req.on('error', function (e) { if ((e == "Error: Socket was unexpectedly closed") && (noretry != true)) { deleteStorage(name, func, true); } else { if (func != null) { if (e.statusCode) { func(e.statusCode); } else { func(null); } } } });
    req.on('response', function (response) { if (func != null) { func(response.statusCode); } });
    req.end();
}


//
//  IDER
//

ider = null;
iderIdleTimer = null;

// Perform IDER
function performIder() {
    if ((settings.floppy != null) && fs.existsSync(settings.floppy) == false) { console.log("Unable to floppy image file: " + settings.floppy); process.exit(); return; }
    if ((settings.cdrom != null) && fs.existsSync(settings.cdrom) == false) { console.log("Unable to CDROM image file: " + settings.cdrom); process.exit(); return; }
    try {
        var sfloppy = null, scdrom = null;
        if (settings.floppy) { try { if (sfloppy = fs.statSync(settings.floppy)) { sfloppy.file = fs.openSync(settings.floppy, 'rbN'); } } catch (ex) { console.log(ex); process.exit(1); return; } }
        if (settings.cdrom) { try { scdrom = fs.statSync(settings.cdrom); if (scdrom) { scdrom.file = fs.openSync(settings.cdrom, 'rbN'); } } catch (ex) { console.log(ex); process.exit(1); return; } }

        ider = require('amt-redir-duk')(require('amt-ider')());
        ider.onStateChanged = onIderStateChange;
        ider.m.floppy = sfloppy;
        ider.m.cdrom = scdrom;
        ider.m.iderStart = 1; // OnReboot = 0, Graceful = 1, Now = 2
        ider.m.debug = (settings.debuglevel > 0);
        if (settings.timeout > 0) { ider.m.sectorStats = iderSectorStats; }
        //ider.digestRealmMatch = wsstack.comm.digestRealm;
        //ider.tlsv1only = amtstack.wsman.comm.tlsv1only;
        ider.Start(settings.hostname, (settings.tls == true) ? 16995 : 16994, settings.username ? 'admin' : settings.username, settings.password, settings.tls);
    } catch (ex) { console.log(ex); }
}

function onIderStateChange(stack, state) { console.log(["Disconnected", "Connecting...", "Connected...", "Started IDER..."][state]); }

function iderSectorStats(mode, dev, mediaBlocks, lba, len) {
    if (iderIdleTimer != null) { clearTimeout(iderIdleTimer); }
    iderIdleTimer = setTimeout(function () { console.log("Idle timeout"); process.exit(1); }, 1000 * settings.timeout);
}

//
// Intel AMT IPv4 wired configuration
//

function performAmtNetConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtNetConfig0, false, args);
    } else {
        performAmtNetConfig0(1, args);
    }
}

function performAmtNetConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['AMT_EthernetPortSettings'], performAmtNetConfig1, args);
}

function performAmtNetConfig1(stack, name, response, status, args) {
    if (status == 200) {
        // Set wired and wireless interfaces
        var amtwirelessif = -1;
        var amtwiredif = -1;
        for (var y in response['AMT_EthernetPortSettings'].responses) {
            var z = response['AMT_EthernetPortSettings'].responses[y];
            if (z['WLANLinkProtectionLevel'] || (y == 1)) { amtwirelessif = y; } // Set the wireless interface, this seems to cover new wireless only computers and older computers with dual interfaces.
            if (y == 0) { if ((amtwirelessif != y) && (z['MACAddress'] != '00-00-00-00-00-00')) { amtwiredif = y; } } // On computers with only wireless, the wired interface will have a null MAC
        }

        // Check if configuration change is required
        if (args) {
            var docall = false;
            var x = JSON.parse(JSON.stringify(response['AMT_EthernetPortSettings'].responses[amtwiredif]));
            var y = response['AMT_EthernetPortSettings'].responses[amtwiredif];
            delete x['IpSyncEnabled'];
            delete x['LinkIsUp'];
            delete x['LinkPolicy'];
            delete x['MACAddress'];
            delete x['SharedDynamicIP'];
            delete x['SharedMAC'];
            delete x['SharedStaticIp'];

            if ((y['IpSyncEnabled'] == false) && (args.ipsync === '1')) { x['IpSyncEnabled'] = true; docall = true; }
            if ((y['IpSyncEnabled'] == true) && (args.ipsync === '0')) { x['IpSyncEnabled'] = false; docall = true; }
            if (args.dhcp && (amtwiredif != -1) && (response['AMT_EthernetPortSettings'].responses[amtwiredif].DHCPEnabled == false)) {
                // Change to DHCP
                x['DHCPEnabled'] = true;
                docall = true;
            }
            else if (args.static && (amtwiredif != -1) && (response['AMT_EthernetPortSettings'].responses[amtwiredif].DHCPEnabled == true)) {
                // Change to STATIC
                x['DHCPEnabled'] = false;
                if (args.ip) { x['IPAddress'] = args.ip; } else { console.log("Missing IPv4 address, use --ip 1.2.3.4"); process.exit(1); }
                if (args.subnet) { x['SubnetMask'] = args.subnet; } else { console.log("Missing IPv4 subnet, use --subnet 255.255.255.0"); process.exit(1); }
                if (args.gateway) { x['DefaultGateway'] = args.gateway; }
                if (args.dns) { x['PrimaryDNS'] = args.dns; }
                if (args.dns2) { x['SecondaryDNS'] = args.dns2; }
                docall = true;
            }
            if (docall) {
                if (x['DHCPEnabled'] == true) {
                    delete x['IPAddress'];
                    delete x['DefaultGateway'];
                    delete x['PrimaryDNS'];
                    delete x['SecondaryDNS'];
                    delete x['SubnetMask'];
                }
                pendingAmtConfigActions++;
                //console.log(JSON.stringify(x, 4, ' '));
                amtstack.Put('AMT_EthernetPortSettings', x, function (stack, name, response, status) { if (status != 200) { console.log("Error, status " + status + "."); } if (--pendingAmtConfigActions == 0) { performAmtNetConfig0(); } }, null, 0, x);
            }
        }

        if (pendingAmtConfigActions == 0) {
            var maxlen = 0;
            if (amtwiredif != -1) { for (var i in response['AMT_EthernetPortSettings'].responses[amtwiredif]) { if (i.length > maxlen) { maxlen = i.length; } } }
            if (amtwirelessif != -1) { for (var i in response['AMT_EthernetPortSettings'].responses[amtwirelessif]) { if (i.length > maxlen) { maxlen = i.length; } } }

            if (amtwiredif != -1) { // Wired
                var z = response['AMT_EthernetPortSettings'].responses[amtwiredif];
                console.log("--WIRED---");
                for (var i in z) {
                    if (['ElementName', 'InstanceID'].indexOf(i) == -1) {
                        var name = i;
                        while (name.length < maxlen) { name += ' '; }
                        console.log(name + ' : ' + z[i]);
                    }
                }
            }
            if (amtwirelessif != -1) { // Wireless
                var z = response['AMT_EthernetPortSettings'].responses[amtwirelessif];
                console.log("--WIRELESS---");
                for (var i in z) {
                    if (['ElementName', 'InstanceID'].indexOf(i) == -1) {
                        var name = i;
                        while (name.length < maxlen) { name += ' '; }
                        console.log(name + ' : ' + z[i]);
                    }
                }
            }
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

//
// Intel AMT Wifi configuration
//

function performAmtWifiConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtWifiConfig0, false, args);
    } else {
        performAmtWifiConfig0(1, args);
    }
}

function performAmtWifiConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['CIM_WiFiEndpointSettings'], performAmtWifiConfig1, args);
}

function performAmtWifiConfig1(stack, name, response, status, args) {
    if ( status == 200 ) {
        var wifiAuthMethod = {1: "Other", 2: "Open", 3: "Shared Key", 4: "WPA PSK", 5: "WPA 802.1x", 6: "WPA2 PSK", 7: "WPA2 802.1x", 32768 : "WPA3 802.1x"};
        var wifiEncMethod = {1: "Other", 2: "WEP", 3: "TKIP", 4: "CCMP", 5: "None"}
        var wifiProfiles = {};
        for (var y in response['CIM_WiFiEndpointSettings'].responses) {
            var z = response['CIM_WiFiEndpointSettings'].responses[y];
            var n = z['ElementName'];
            wifiProfiles[n]= {'Priority': z['Priority'], 'SSID':z['SSID'],'AuthenticationMethod': z['AuthenticationMethod'], 'EncryptionMethod': z['EncryptionMethod']};
        }

        if (args) {
            if (args.list) {
                console.log('List of Intel AMT Wifi profiles:');
                if (wifiProfiles.length==0) {
                    console.log('No Wifi profiles is stored.');
                }
                for (var t in wifiProfiles) {
                    var w = wifiProfiles[t];
                    console.log('Profile Name: '+t+'; Priority: '+w['Priority']+ '; SSID: '+w['SSID']+'; Security: '+wifiAuthMethod[w['AuthenticationMethod']]+'/'+wifiEncMethod[w['EncryptionMethod']]);
                }
                process.exit(0);
            } else if (args.add) {
                if (args.auth==null) {args.auth=6}//if not set, default to WPA2 PSK
                if (args.enc==null) {args.enc=3}//if not set, default to TKIP
                if (args.priority==null) {args.priority=0}//if not set, default to 0

                var wifiep = {
                    __parameterType: 'reference',
                    __resourceUri: 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_WiFiEndpoint',
                    Name: 'WiFi Endpoint 0'
                };

                var wifiepsettinginput = {
                    __parameterType: 'instance',
                    __namespace: 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_WiFiEndpointSettings',
                    ElementName: args.name,
                    InstanceID: 'Intel(r) AMT:WiFi Endpoint Settings ' + args.name,
                    AuthenticationMethod: args.auth,                        
                    EncryptionMethod: args.enc,
                    SSID: args.ssid,
                    Priority: args.priority,
                    PSKPassPhrase: args.psk
                }                
                stack.AMT_WiFiPortConfigurationService_AddWiFiSettings(wifiep, wifiepsettinginput, null, null, null, 
                    function(stck, nm, resp, sts) {
                        if (sts==200) {
                            console.log("Wifi profile " + args.name + " successfully added.");
                        } else {
                            console.log("Failed to add wifi profile " + args.name + ".");
                        }
                        process.exit(0);
                    });                
            } else if (args.del) {
                if (wifiProfiles[args.name]==null) {
                    console.log("Profile "+args.name+" could not be found.");
                    process.exit(0);
                }
                stack.Delete('CIM_WiFiEndpointSettings', { InstanceID : 'Intel(r) AMT:WiFi Endpoint Settings ' + args.name }, 
                    function(stck, nm, resp, sts){
                        if (sts==200) {
                            console.log("Wifi profile " + args.name + " successfully deleted.");
                        } else {
                            console.log("Failed to delete wifi profile " + args.name + ".");
                        }
                        process.exit(0);
                    }, 
                0, 1);
            }
        } else {
            process.exit(0);
        }         
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

//
// Intel AMT wake alarm configuration
//

function _fmtdatetime(str) {
    return str.replace('T', ' ').replace('Z', '');
}

function _fmtinterval(str) {
    var cl = str.replace('T', '').substring(str.indexOf('P') + 1);
    cl = ' ' + cl.replace('D', " days ").replace('H', " hours ").replace('M', " minutes ");
    cl = cl.replace(" 1 days ", " 1 day ").replace(" 1 hours ", " 1 hour ").replace(" 1 minutes ", " 1 minute ");
    return cl.substring(0, cl.length - 1);
}

function _fmttimepad(str) {
    str = '' + str;
    while (str.length < 2) { str = '0' + str; }
    return str;
}

function convertAmtDataStr(str) {
    var timeArray = str.split('Z').join('').split('T').join('-').split(':').join('-').split('-');
    return new Date(timeArray[0], timeArray[1] - 1, timeArray[2], timeArray[3], timeArray[4], timeArray[5]);
}

function prepareAlarmOccurenceTemplate(id, nm, start, interval, del) {
    return '<d:AlarmTemplate xmlns:d=\"http://intel.com/wbem/wscim/1/amt-schema/1/AMT_AlarmClockService\" xmlns:s=\"http://intel.com/wbem/wscim/1/ips-schema/1/IPS_AlarmClockOccurrence\"><s:InstanceID>' + id + '</s:InstanceID><s:StartTime><p:Datetime xmlns:p=\"http://schemas.dmtf.org/wbem/wscim/1/common\">' + start + '</p:Datetime></s:StartTime><s:Interval><p:Interval xmlns:p=\"http://schemas.dmtf.org/wbem/wscim/1/common\">' + interval + '</p:Interval></s:Interval><s:DeleteOnCompletion>' + del + '</s:DeleteOnCompletion></d:AlarmTemplate>';
}

function performAmtWakeConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtWakeConfig0, false, args);
    } else {
        performAmtWakeConfig0(1, args);
    }
}

function performAmtWakeConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['IPS_AlarmClockOccurrence'], performAmtWakeConfig1, args);
}

function performAmtWakeConfig1(stack, name, response, status, args) {
    if (status == 200) {
        var response = response['IPS_AlarmClockOccurrence'].responses;
        if (!args) { process.exit(0); return; }
        if (args.list) {
            if (response.length == 0) {
                console.log('No wake alarms.');
            } else {
                for (var i = 0; i < response.length; i++) {
                    var waketime = convertAmtDataStr(response[i]['StartTime']['Datetime']);
                    var t = waketime.toLocaleString(), tx = t.indexOf('.');
                    if (tx >= 0) { t = t.substring(0, tx); }
                    var details = response[i]['ElementName'] + ', wake on ' + t.replace(' ', ' at ');
                    if (response[i]['Interval'] != null) { details += ' and each' + _fmtinterval(response[i]['Interval']['Interval']); }
                    if (response[i]['DeleteOnCompletion'] == true) { details += ", delete when done"; }
                    console.log(details);
                }
            }
            process.exit(0);
        } else if (args.del) {
            // Remove a wake alarm, start by looking to see if it exists
            var alarmFound = false;
            for (var i = 0; i < response.length; i++) { if (response[i]['ElementName'] == args.del) { alarmFound = true; } }
            if (alarmFound == false) { console.log("Wake alarm " + args.del + " could not be found."); process.exit(0); return; }
            // Remote the alarm
            stack.Delete('IPS_AlarmClockOccurrence', { InstanceID: args.del },
                function (stck, nm, resp, sts) {
                    if (sts == 200) { console.log("Done."); } else { console.log("Failed to delete wake alarm " + args.del + "."); }
                    process.exit(0);
                },
            0, 1);
        } else if (args.add) {
            // Add a wake alarm
            var alarmFound = false;
            for (var i = 0; i < response.length; i++) { if (response[i]['ElementName'] == args.add) { alarmFound = true; } }
            if (alarmFound) { console.log("Wake alarm " + args.add + " already exists."); process.exit(0); return; }
            if (typeof args.time != 'string') { args.time = '00:00:00'; }
            if (typeof args.interval != 'string') { args.interval = ''; }
            var alarm_name = args.add;
            var x1 = args.date.split('-');
            var x2 = args.time.split(':');
            var t = new Date(x1[0], x1[1] - 1, x1[2], x2[0], x2[1], 0, 0); // Not sure why, but month is 0 = JAN, 11 = DEC, seconds must be 00.
            var alarm_starttime = _fmttimepad(t.getFullYear()) + '-' + _fmttimepad(t.getMonth() + 1) + '-' + _fmttimepad(t.getDate()) + 'T' + _fmttimepad(t.getHours()) + ':' + _fmttimepad(t.getMinutes()) + ':' + _fmttimepad(t.getSeconds()) + 'Z';
            var x = args.interval.split('-');
            if (x.length != 3) { x = [0, 0, 0]; }
            var alarm_interval = 'P' + x[0] + 'DT' + x[1] + 'H' + x[2] + 'M';
            var alarm_doc = (args.deletewhendone != null);
            var tpl = prepareAlarmOccurenceTemplate(alarm_name, alarm_name, alarm_starttime, alarm_interval, alarm_doc);
            stack.wsman.ExecMethodXml(amtstack.CompleteName('AMT_AlarmClockService'), 'AddAlarm', tpl,
                function (ws, resuri, response, status) {
                    if (status != 200) { console.log("Failed to add alarm. Status: " + status + ". Verify the alarm is for a future time."); }
                    else if (response.Body['ReturnValue'] != 0) { console.log("Failed to add alarm " + response.Body['ReturnValueStr'] + ". Verify the alarm is for a future time."); }
                    else { console.log("Done."); }
                    process.exit(0);
                }
            );
        } else {
            console.log("Unknown action, specify --list, --del or --add.");
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

//
// Intel AMT feature configuration action
//

function performAmtFeatureConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtFeatureConfig0, false, args);
    } else {
        performAmtFeatureConfig0(1, args);
    }
}

function performAmtFeatureConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['*IPS_OptInService', '*AMT_RedirectionService', '*CIM_KVMRedirectionSAP'], performAmtFeatureConfig1, args);
}

function performAmtFeatureConfig1(stack, name, response, status, args) {
    if (status == 200) {
        // User consent
        var optinrequired = response['IPS_OptInService'].response['OptInRequired'];
        if (args) {
            if ((args.userconsent == 'none') && (optinrequired != 0)) {
                pendingAmtConfigActions++;
                response['IPS_OptInService'].response['OptInRequired'] = 0;
                amtstack.Put('IPS_OptInService', response['IPS_OptInService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } });
            }
            else if ((args.userconsent == 'kvm') && (optinrequired != 1)) {
                pendingAmtConfigActions++;
                response['IPS_OptInService'].response['OptInRequired'] = 1;
                amtstack.Put('IPS_OptInService', response['IPS_OptInService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } });
            }
            else if ((args.userconsent == 'all') && (optinrequired != 0xFFFFFFFF)) {
                pendingAmtConfigActions++;
                response['IPS_OptInService'].response['OptInRequired'] = 0xFFFFFFFF;
                amtstack.Put('IPS_OptInService', response['IPS_OptInService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } });
            }
        }

        // Redirection ports
        var redirportchange = false;
        var redirchange = false;
        var redir = (response['AMT_RedirectionService'].response['ListenerEnabled'] == true);

        var sol = ((response['AMT_RedirectionService'].response['EnabledState'] & 2) != 0);
        var ider = ((response['AMT_RedirectionService'].response['EnabledState'] & 1) != 0);
        if (args) {
            if ((redir == false) && ((args.redir == 'enabled') || (args.redir == 1))) { response['AMT_RedirectionService'].response['ListenerEnabled'] = true; redirportchange = true; }
            if ((redir == true) && ((args.redir == 'disabled') || (args.redir == 0))) { response['AMT_RedirectionService'].response['ListenerEnabled'] = false; redirportchange = true; }
            if ((sol == false) && ((args.sol == 'enabled') || (args.sol == 1))) { sol = true; redirchange = true; }
            if ((sol == true) && ((args.sol == 'disabled') || (args.sol == 0))) { sol = false; redirchange = true; }
            if ((ider == false) && ((args.ider == 'enabled') || (args.ider == 1))) { ider = true; redirchange = true; }
            if ((ider == true) && ((args.ider == 'disabled') || (args.ider == 0))) { ider = false; redirchange = true; }
            if (redirportchange) { pendingAmtConfigActions++; amtstack.Put("AMT_RedirectionService", response['AMT_RedirectionService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } }); }
            if (redirchange) { pendingAmtConfigActions++; amtstack.AMT_RedirectionService_RequestStateChange((32768 + ((ider ? 1 : 0) + (sol ? 2 : 0))), function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } }); }
        }

        // KVM
        var kvm = false;
        var kvmchange = false;
        if (response['CIM_KVMRedirectionSAP'] != null) {
            kvm = ((response['CIM_KVMRedirectionSAP'].response["EnabledState"] == 6 && response['CIM_KVMRedirectionSAP'].response['RequestedState'] == 2) || response['CIM_KVMRedirectionSAP'].response['EnabledState'] == 2 || response['CIM_KVMRedirectionSAP'].response['EnabledState'] == 6);
            if (args) {
                if ((kvm == false) && ((args.kvm == 'enabled') || (args.kvm == 1))) { kvm = true; kvmchange = true; }
                if ((kvm == true) && ((args.kvm == 'disabled') || (args.kvm == 0))) { kvm = false; kvmchange = true; }
                if (kvmchange) { pendingAmtConfigActions++; amtstack.CIM_KVMRedirectionSAP_RequestStateChange(kvm ? 2 : 3, 0, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } }); }
            }
        }

        if (pendingAmtConfigActions == 0) {
            if (optinrequired == 0) { console.log("User Consent         : None"); }
            else if (optinrequired == 1) { console.log("User Consent         : KVM"); }
            else if (optinrequired == 0xFFFFFFFF) { console.log("User Consent         : All"); }
            else { console.log("User Consent         : " + optinrequired); }
            console.log("Redirection Port     : " + (redir ? "Enabled" : "Disabled"));
            console.log("Serial-over-LAN      : " + (sol ? "Enabled" : "Disabled"));
            console.log("IDE Redirection      : " + (ider ? "Enabled" : 'Disabled'));
            if (response['CIM_KVMRedirectionSAP'] != null) { console.log("Remote desktop (KVM) : " + (kvm ? "Enabled" : "Disabled")); }
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}


//
// Intel AMT Remote Power Action
//

function performAmtPowerAction() {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    if (settings.poweraction != 0) {
        // Set the power state
        amtstack.RequestPowerStateChange(settings.poweraction, performAmtPowerActionEx);
    } else {
        // Get the power state
        amtstack.Get('CIM_AssociatedPowerManagementService', performAmtPowerActionEx2, 0, 1);
    }
}

function performAmtPowerActionEx(stack, name, response, status) {
    if (status == 200) {
        console.log(response.Body.ReturnValueStr.split('_').join(' '));
        process.exit(0);
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

var DMTFPowerStates = ['', '', "Power on", "Light sleep", "Deep sleep", "Power cycle (Soft off)", "Off - Hard", "Hibernate (Off soft)", "Soft off", "Power cycle (Off-hard)", "Master bus reset", "Diagnostic interrupt (NMI)", "Not applicable", "Off - Soft graceful", "Off - Hard graceful", "Master bus reset graceful", "Power cycle (Off - Soft graceful)", "Power cycle (Off - Hard graceful)", "Diagnostic interrupt (INIT)"];
function performAmtPowerActionEx2(stack, name, response, status) {
    if (status == 200) {
        var powerNumber = parseInt(response.Body.PowerState);
        if ((powerNumber >= DMTFPowerStates.length) && (powerNumber > 1)) {
            console.log("Unknown power state: " + response.Body.PowerState);
        } else {
            console.log("Current power state: " + DMTFPowerStates[powerNumber]);
        }
        process.exit(0);
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}


//
//  Startup
//

// Parse URL arguments
function parseUrlArguments(url) {
    var r = {}, x = url.split('?');
    if (x.length < 2) return r;
    x = x[1].split('&');
    for (var i in x) { var j = x[i].indexOf('='); if (j > 0) { r[x[i].substring(0, j).toLowerCase()] = x[i].substring(j + 1); } }
    return r;
}

// Remove a element from a array
function removeItemFromArray(array, element) {
    var index = array.indexOf(element);
    if (index !== -1) { array.splice(index, 1); }
}

// Run MeshCmd, but before we do, we need to see if what type of service we are going to be
var serviceName = null, serviceDisplayName = null, serviceDesc = null;
for (var i in process.argv) {
    if (process.argv[i].toLowerCase() == 'install') { process.argv[i] = '-install'; }
    if (process.argv[i].toLowerCase() == 'uninstall') { process.argv[i] = '-uninstall'; }
    if ((process.argv[i].toLowerCase() == 'microlms') || (process.argv[i].toLowerCase() == 'amtlms') || (process.argv[i].toLowerCase() == 'lms')) {
        serviceName = 'MicroLMS';
        serviceDisplayName = "MicroLMS Service for Intel(R) AMT";
        serviceDesc = "Intel AMT Micro Local Manageability Service (MicroLMS)";
    } else if ((process.argv[i].toLowerCase() == 'intellms')) {
        serviceName = 'LMS';
        serviceDisplayName = "Intel(R) Management and Security Application Local Management Service";
        serviceDesc = "Intel(R) Management and Security Application Local Management Service - Provides OS-related Intel(R) ME functionality.";
    } else if ((process.argv[i].toLowerCase() == 'meshcommander') || (process.argv[i].toLowerCase() == 'commander')) {
        serviceName = 'MeshCommander';
        serviceDisplayName = "MeshCommander, Intel AMT Management console";
        serviceDesc = "MeshCommander is a Intel AMT management console.";
    }
}

if (serviceName == null) {
    if (process.execPath.includes('MicroLMS')) { serviceName = 'MicroLMS'; }
    else if (process.execPath.includes('LMS')) { serviceName = 'LMS'; }
    else if (process.execPath.includes('MeshCommander')) { serviceName = 'MeshCommander'; }
    if (serviceName == null) { for (var i in process.argv) { if ((process.argv[i].toLowerCase() == '-install') || (process.argv[i].toLowerCase() == '-uninstall')) { console.log('In order to install/uninstall, a service type must be specified.'); process.exit(); } } }
    if (serviceName == null) { try { run(process.argv); } catch (e) { console.log("ERROR: " + e); } }
} else {
    var serviceHost = require('service-host');
    var meshcmdService = new serviceHost({ name: serviceName, displayName: serviceDisplayName, startType: 'AUTO_START', description: serviceDesc });

    // Called when the background service is started.
    meshcmdService.on('serviceStart', function onStart() {
        //process.coreDumpLocation = 'C:\\tmp\\meshcommander.dmp';
        //process.on('exit', function () { console.log('exit3'); _debugCrash(); });
        console.setDestination(console.Destinations.DISABLED); // Disable console.log().
        //console.setDestination(console.Destinations.LOGFILE);
        //attachDebuger({ webport: 0, wait: 1 }).then(console.log, console.log);

        if (process.execPath.includes('MicroLMS')) { run([process.execPath, 'microlms']); } // Start MicroLMS
        else if (process.execPath.includes('LMS')) { run([process.execPath, 'microlms']); } // Start MicroLMS
        else if (process.execPath.includes('MeshCommander')) { run([process.execPath, 'meshcommander']); } // Start MeshCommander
        else { console.log("Aborting Service Start, because unknown binary: " + process.execPath); process.exit(1); }
    });

    // Called when the background service is stopping
    meshcmdService.on('serviceStop', function onStop() { console.log("Stopping service"); process.exit(); }); // The console.log() is for debugging, will be ignored unless "console.setDestination()" is set.

    // Called when the executable is not running as a service, run normally.
    meshcmdService.on('normalStart', function onNormalStart() { try { run(process.argv); } catch (e) { console.log("ERROR: " + e); } });
    meshcmdService.run();
}
